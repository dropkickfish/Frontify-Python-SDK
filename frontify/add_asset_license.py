# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType, CopyrightStatus, TagSource, WorkflowStatusEnterRule


class AddAssetLicense(BaseModel):
    add_asset_license: Optional["AddAssetLicenseAddAssetLicense"] = Field(
        alias="addAssetLicense"
    )


class AddAssetLicenseAddAssetLicense(BaseModel):
    asset: Optional["AddAssetLicenseAddAssetLicenseAsset"]
    license: Optional["AddAssetLicenseAddAssetLicenseLicense"]


class AddAssetLicenseAddAssetLicenseAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "AddAssetLicenseAddAssetLicenseAssetCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["AddAssetLicenseAddAssetLicenseAssetModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[Optional["AddAssetLicenseAddAssetLicenseAssetAttachments"]]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["AddAssetLicenseAddAssetLicenseAssetTags"]]]
    copyright: Optional["AddAssetLicenseAddAssetLicenseAssetCopyright"]
    availability: "AddAssetLicenseAddAssetLicenseAssetAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[List[Optional["AddAssetLicenseAddAssetLicenseAssetLicenses"]]]
    status: AssetStatusType
    related_assets: "AddAssetLicenseAddAssetLicenseAssetRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["AddAssetLicenseAddAssetLicenseAssetComments"]
    current_user_permissions: (
        "AddAssetLicenseAddAssetLicenseAssetCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    custom_metadata: List["AddAssetLicenseAddAssetLicenseAssetCustomMetadata"] = Field(
        alias="customMetadata"
    )
    workflow_task: Optional["AddAssetLicenseAddAssetLicenseAssetWorkflowTask"] = Field(
        alias="workflowTask"
    )


class AddAssetLicenseAddAssetLicenseAssetCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetAttachments(BaseModel):
    id: str
    creator: "AddAssetLicenseAddAssetLicenseAssetAttachmentsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["AddAssetLicenseAddAssetLicenseAssetAttachmentsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class AddAssetLicenseAddAssetLicenseAssetAttachmentsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetAttachmentsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetTags(BaseModel):
    value: str
    source: Optional[TagSource]


class AddAssetLicenseAddAssetLicenseAssetCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class AddAssetLicenseAddAssetLicenseAssetLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class AddAssetLicenseAddAssetLicenseAssetRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItems"]]
    ]


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[
            Optional["AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsAttachments"]
        ]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[
        List[Optional["AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsTags"]]
    ]
    copyright: Optional[
        "AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsCopyright"
    ]
    availability: "AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[Optional["AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsLicenses"]]
    ]
    status: AssetStatusType
    related_assets: (
        "AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsRelatedAssets"
    ) = Field(alias="relatedAssets")
    comments: Optional["AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsComments"]
    current_user_permissions: (
        "AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    workflow_task: Optional[
        "AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsWorkflowTask"
    ] = Field(alias="workflowTask")
    variants: Optional["AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsVariants"]
    preview_background_color: Optional[
        "AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsTags(BaseModel):
    value: str
    source: Optional[TagSource]


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsCurrentUserPermissions(
    BaseModel
):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsWorkflowTask(BaseModel):
    id: str
    title: Optional[str]
    description: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItemsPreviewBackgroundColor(
    BaseModel
):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class AddAssetLicenseAddAssetLicenseAssetComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["AddAssetLicenseAddAssetLicenseAssetCommentsItems"]]]


class AddAssetLicenseAddAssetLicenseAssetCommentsItems(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    content: str
    mentioned_users: List[
        Optional["AddAssetLicenseAddAssetLicenseAssetCommentsItemsMentionedUsers"]
    ] = Field(alias="mentionedUsers")
    is_resolved: bool = Field(alias="isResolved")
    replies: "AddAssetLicenseAddAssetLicenseAssetCommentsItemsReplies"


class AddAssetLicenseAddAssetLicenseAssetCommentsItemsMentionedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetCommentsItemsReplies(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class AddAssetLicenseAddAssetLicenseAssetCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class AddAssetLicenseAddAssetLicenseAssetCustomMetadata(BaseModel):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "AddAssetLicenseAddAssetLicenseAssetCustomMetadataProperty"


class AddAssetLicenseAddAssetLicenseAssetCustomMetadataProperty(BaseModel):
    id: str
    creator: "AddAssetLicenseAddAssetLicenseAssetCustomMetadataPropertyCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional[
        "AddAssetLicenseAddAssetLicenseAssetCustomMetadataPropertyModifier"
    ]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    type: "AddAssetLicenseAddAssetLicenseAssetCustomMetadataPropertyType"
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class AddAssetLicenseAddAssetLicenseAssetCustomMetadataPropertyCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetCustomMetadataPropertyModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetCustomMetadataPropertyType(BaseModel):
    typename__: Literal[
        "CustomMetadataPropertyType",
        "CustomMetadataPropertyTypeDate",
        "CustomMetadataPropertyTypeLongText",
        "CustomMetadataPropertyTypeMultiSelect",
        "CustomMetadataPropertyTypeNumber",
        "CustomMetadataPropertyTypeSelect",
        "CustomMetadataPropertyTypeText",
        "CustomMetadataPropertyTypeUrl",
    ] = Field(alias="__typename")
    name: str


class AddAssetLicenseAddAssetLicenseAssetWorkflowTask(BaseModel):
    id: str
    assigned_users: List[
        Optional["AddAssetLicenseAddAssetLicenseAssetWorkflowTaskAssignedUsers"]
    ] = Field(alias="assignedUsers")
    asset: Optional["AddAssetLicenseAddAssetLicenseAssetWorkflowTaskAsset"]
    title: Optional[str]
    description: Optional[str]
    status: "AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatus"
    checklist_item: "AddAssetLicenseAddAssetLicenseAssetWorkflowTaskChecklistItem" = (
        Field(alias="checklistItem")
    )


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType
    variants: Optional["AddAssetLicenseAddAssetLicenseAssetWorkflowTaskAssetVariants"]
    preview_background_color: Optional[
        "AddAssetLicenseAddAssetLicenseAssetWorkflowTaskAssetPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskAssetVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskAssetPreviewBackgroundColor(
    BaseModel
):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatus(BaseModel):
    id: str
    name: str
    color: "AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatusColor"
    assigned_users: List[
        Optional["AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatusAssignedUsers"]
    ] = Field(alias="assignedUsers")
    checklist_presets: List[
        Optional[
            "AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatusChecklistPresets"
        ]
    ] = Field(alias="checklistPresets")
    tasks: "AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatusTasks"
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatusColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatusAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatusChecklistPresets(BaseModel):
    id: str
    content: str


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatusTasks(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskChecklistItem(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional[
                "AddAssetLicenseAddAssetLicenseAssetWorkflowTaskChecklistItemItems"
            ]
        ]
    ]


class AddAssetLicenseAddAssetLicenseAssetWorkflowTaskChecklistItemItems(BaseModel):
    id: str
    content: str


class AddAssetLicenseAddAssetLicenseLicense(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


AddAssetLicense.model_rebuild()
AddAssetLicenseAddAssetLicense.model_rebuild()
AddAssetLicenseAddAssetLicenseAsset.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetAttachments.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetRelatedAssets.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetRelatedAssetsItems.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetComments.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetCommentsItems.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetCustomMetadata.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetCustomMetadataProperty.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetWorkflowTask.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetWorkflowTaskAsset.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetWorkflowTaskStatus.model_rebuild()
AddAssetLicenseAddAssetLicenseAssetWorkflowTaskChecklistItem.model_rebuild()
