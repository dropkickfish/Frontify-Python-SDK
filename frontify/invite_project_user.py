# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType, CopyrightStatus, TagSource


class InviteProjectUser(BaseModel):
    invite_project_user: Optional["InviteProjectUserInviteProjectUser"] = Field(
        alias="inviteProjectUser"
    )


class InviteProjectUserInviteProjectUser(BaseModel):
    project: Optional[
        Annotated[
            Union[
                "InviteProjectUserInviteProjectUserProjectMediaLibrary",
                "InviteProjectUserInviteProjectUserProjectIconLibrary",
                "InviteProjectUserInviteProjectUserProjectLogoLibrary",
                "InviteProjectUserInviteProjectUserProjectDocumentLibrary",
                "InviteProjectUserInviteProjectUserProjectWorkspace",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class InviteProjectUserInviteProjectUserProjectMediaLibrary(BaseModel):
    typename__: Literal["MediaLibrary"] = Field(alias="__typename")
    id: str
    name: str
    color: Optional["InviteProjectUserInviteProjectUserProjectMediaLibraryColor"]
    asset_count: Optional[int] = Field(alias="assetCount")
    assets: "InviteProjectUserInviteProjectUserProjectMediaLibraryAssets"
    licenses: Optional[
        List[Optional["InviteProjectUserInviteProjectUserProjectMediaLibraryLicenses"]]
    ]
    browse: "InviteProjectUserInviteProjectUserProjectMediaLibraryBrowse"
    collaborators: Optional[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryCollaborators"
    ]
    current_user_permissions: (
        "InviteProjectUserInviteProjectUserProjectMediaLibraryCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    custom_metadata_properties: List[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryCustomMetadataProperties"
    ] = Field(alias="customMetadataProperties")
    collections: "InviteProjectUserInviteProjectUserProjectMediaLibraryCollections"


class InviteProjectUserInviteProjectUserProjectMediaLibraryColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional["InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItems"]
        ]
    ]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsModifier"
    ]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[
            Optional[
                "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsAttachments"
            ]
        ]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[
        List[
            Optional[
                "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsTags"
            ]
        ]
    ]
    copyright: Optional[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCopyright"
    ]
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[
            Optional[
                "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLicenses"
            ]
        ]
    ]
    status: AssetStatusType
    related_assets: (
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsRelatedAssets"
    ) = Field(alias="relatedAssets")
    comments: Optional[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsComments"
    ]
    current_user_permissions: (
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    custom_metadata: List[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCustomMetadata"
    ] = Field(alias="customMetadata")
    location: "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocation"


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCreator(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsModifier(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsAttachments(
    BaseModel
):
    id: str
    creator: "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsAttachmentsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsAttachmentsModifier"
    ]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsAttachmentsCreator(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsAttachmentsModifier(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsTags(BaseModel):
    value: str
    source: Optional[TagSource]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCopyright(
    BaseModel
):
    status: CopyrightStatus
    notice: Optional[str]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLicenses(
    BaseModel
):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsRelatedAssets(
    BaseModel
):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional[
                "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsRelatedAssetsItems"
            ]
        ]
    ]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsRelatedAssetsItems(
    BaseModel
):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsComments(
    BaseModel
):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional[
                "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCommentsItems"
            ]
        ]
    ]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCommentsItems(
    BaseModel
):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    content: str
    is_resolved: bool = Field(alias="isResolved")


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCurrentUserPermissions(
    BaseModel
):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCustomMetadata(
    BaseModel
):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCustomMetadataProperty"


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCustomMetadataProperty(
    BaseModel
):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocation(
    BaseModel
):
    brand: Optional[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocationBrand"
    ]
    library: Optional[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocationLibrary"
    ]
    workspace_project: Optional[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocationWorkspaceProject"
    ] = Field(alias="workspaceProject")
    folder: Optional[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocationFolder"
    ]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocationBrand(
    BaseModel
):
    id: str
    name: str


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocationLibrary(
    BaseModel
):
    id: str
    name: Optional[str]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocationWorkspaceProject(
    BaseModel
):
    id: str
    name: Optional[str]


class InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocationFolder(
    BaseModel
):
    id: str
    name: str


class InviteProjectUserInviteProjectUserProjectMediaLibraryLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class InviteProjectUserInviteProjectUserProjectMediaLibraryBrowse(BaseModel):
    folders: "InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFolders"
    assets: "InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseAssets"


class InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional[
                "InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFoldersItems"
            ]
        ]
    ]


class InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFoldersItems(
    BaseModel
):
    typename__: Literal["Folder", "SubFolder"] = Field(alias="__typename")
    id: str
    name: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    breadcrumbs: List[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFoldersItemsBreadcrumbs"
    ]
    folders: (
        "InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFoldersItemsFolders"
    )
    assets: (
        "InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFoldersItemsAssets"
    )


class InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFoldersItemsBreadcrumbs(
    BaseModel
):
    id: Optional[str]
    name: Optional[str]


class InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFoldersItemsFolders(
    BaseModel
):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFoldersItemsAssets(
    BaseModel
):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class InviteProjectUserInviteProjectUserProjectMediaLibraryCollaborators(BaseModel):
    users: "InviteProjectUserInviteProjectUserProjectMediaLibraryCollaboratorsUsers"


class InviteProjectUserInviteProjectUserProjectMediaLibraryCollaboratorsUsers(
    BaseModel
):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: List[
        Optional[
            "InviteProjectUserInviteProjectUserProjectMediaLibraryCollaboratorsUsersItems"
        ]
    ]


class InviteProjectUserInviteProjectUserProjectMediaLibraryCollaboratorsUsersItems(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class InviteProjectUserInviteProjectUserProjectMediaLibraryCurrentUserPermissions(
    BaseModel
):
    can_create_assets: bool = Field(alias="canCreateAssets")
    can_view_collaborators: bool = Field(alias="canViewCollaborators")
    can_create_collections: bool = Field(alias="canCreateCollections")


class InviteProjectUserInviteProjectUserProjectMediaLibraryCustomMetadataProperties(
    BaseModel
):
    id: str
    creator: "InviteProjectUserInviteProjectUserProjectMediaLibraryCustomMetadataPropertiesCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional[
        "InviteProjectUserInviteProjectUserProjectMediaLibraryCustomMetadataPropertiesModifier"
    ]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    type: "InviteProjectUserInviteProjectUserProjectMediaLibraryCustomMetadataPropertiesType"
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class InviteProjectUserInviteProjectUserProjectMediaLibraryCustomMetadataPropertiesCreator(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class InviteProjectUserInviteProjectUserProjectMediaLibraryCustomMetadataPropertiesModifier(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class InviteProjectUserInviteProjectUserProjectMediaLibraryCustomMetadataPropertiesType(
    BaseModel
):
    typename__: Literal[
        "CustomMetadataPropertyType",
        "CustomMetadataPropertyTypeDate",
        "CustomMetadataPropertyTypeLongText",
        "CustomMetadataPropertyTypeMultiSelect",
        "CustomMetadataPropertyTypeNumber",
        "CustomMetadataPropertyTypeSelect",
        "CustomMetadataPropertyTypeText",
        "CustomMetadataPropertyTypeUrl",
    ] = Field(alias="__typename")
    name: str


class InviteProjectUserInviteProjectUserProjectMediaLibraryCollections(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional[
                "InviteProjectUserInviteProjectUserProjectMediaLibraryCollectionsItems"
            ]
        ]
    ]


class InviteProjectUserInviteProjectUserProjectMediaLibraryCollectionsItems(BaseModel):
    id: str
    name: str


class InviteProjectUserInviteProjectUserProjectIconLibrary(BaseModel):
    typename__: Literal["IconLibrary"] = Field(alias="__typename")
    id: str
    name: str
    asset_count: Optional[int] = Field(alias="assetCount")


class InviteProjectUserInviteProjectUserProjectLogoLibrary(BaseModel):
    typename__: Literal["LogoLibrary"] = Field(alias="__typename")
    id: str
    name: str
    asset_count: Optional[int] = Field(alias="assetCount")


class InviteProjectUserInviteProjectUserProjectDocumentLibrary(BaseModel):
    typename__: Literal["DocumentLibrary"] = Field(alias="__typename")
    id: str
    name: str
    asset_count: Optional[int] = Field(alias="assetCount")


class InviteProjectUserInviteProjectUserProjectWorkspace(BaseModel):
    typename__: Literal["Workspace"] = Field(alias="__typename")
    id: str
    name: str
    asset_count: Optional[int] = Field(alias="assetCount")


InviteProjectUser.model_rebuild()
InviteProjectUserInviteProjectUser.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibrary.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryAssets.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItems.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsAttachments.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsRelatedAssets.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsComments.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsCustomMetadata.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryAssetsItemsLocation.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryBrowse.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFolders.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryBrowseFoldersItems.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryCollaborators.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryCollaboratorsUsers.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryCustomMetadataProperties.model_rebuild()
InviteProjectUserInviteProjectUserProjectMediaLibraryCollections.model_rebuild()
