# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType, CopyrightStatus, TagSource, WorkflowStatusEnterRule


class MoveAssets(BaseModel):
    move_assets: Optional["MoveAssetsMoveAssets"] = Field(alias="moveAssets")


class MoveAssetsMoveAssets(BaseModel):
    assets: Optional[List["MoveAssetsMoveAssetsAssets"]]


class MoveAssetsMoveAssetsAssets(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "MoveAssetsMoveAssetsAssetsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["MoveAssetsMoveAssetsAssetsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[List[Optional["MoveAssetsMoveAssetsAssetsAttachments"]]]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["MoveAssetsMoveAssetsAssetsTags"]]]
    copyright: Optional["MoveAssetsMoveAssetsAssetsCopyright"]
    availability: "MoveAssetsMoveAssetsAssetsAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[List[Optional["MoveAssetsMoveAssetsAssetsLicenses"]]]
    status: AssetStatusType
    related_assets: "MoveAssetsMoveAssetsAssetsRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["MoveAssetsMoveAssetsAssetsComments"]
    current_user_permissions: "MoveAssetsMoveAssetsAssetsCurrentUserPermissions" = (
        Field(alias="currentUserPermissions")
    )
    custom_metadata: List["MoveAssetsMoveAssetsAssetsCustomMetadata"] = Field(
        alias="customMetadata"
    )
    workflow_task: Optional["MoveAssetsMoveAssetsAssetsWorkflowTask"] = Field(
        alias="workflowTask"
    )
    variants: Optional["MoveAssetsMoveAssetsAssetsVariants"]
    location: "MoveAssetsMoveAssetsAssetsLocation"
    preview_background_color: Optional[
        "MoveAssetsMoveAssetsAssetsPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class MoveAssetsMoveAssetsAssetsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsAttachments(BaseModel):
    id: str
    creator: "MoveAssetsMoveAssetsAssetsAttachmentsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["MoveAssetsMoveAssetsAssetsAttachmentsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class MoveAssetsMoveAssetsAssetsAttachmentsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsAttachmentsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsTags(BaseModel):
    value: str
    source: Optional[TagSource]


class MoveAssetsMoveAssetsAssetsCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class MoveAssetsMoveAssetsAssetsAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class MoveAssetsMoveAssetsAssetsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class MoveAssetsMoveAssetsAssetsRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["MoveAssetsMoveAssetsAssetsRelatedAssetsItems"]]]


class MoveAssetsMoveAssetsAssetsRelatedAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "MoveAssetsMoveAssetsAssetsRelatedAssetsItemsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["MoveAssetsMoveAssetsAssetsRelatedAssetsItemsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[Optional["MoveAssetsMoveAssetsAssetsRelatedAssetsItemsAttachments"]]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["MoveAssetsMoveAssetsAssetsRelatedAssetsItemsTags"]]]
    copyright: Optional["MoveAssetsMoveAssetsAssetsRelatedAssetsItemsCopyright"]
    availability: "MoveAssetsMoveAssetsAssetsRelatedAssetsItemsAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[Optional["MoveAssetsMoveAssetsAssetsRelatedAssetsItemsLicenses"]]
    ]
    status: AssetStatusType
    related_assets: "MoveAssetsMoveAssetsAssetsRelatedAssetsItemsRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["MoveAssetsMoveAssetsAssetsRelatedAssetsItemsComments"]
    current_user_permissions: (
        "MoveAssetsMoveAssetsAssetsRelatedAssetsItemsCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    workflow_task: Optional[
        "MoveAssetsMoveAssetsAssetsRelatedAssetsItemsWorkflowTask"
    ] = Field(alias="workflowTask")
    variants: Optional["MoveAssetsMoveAssetsAssetsRelatedAssetsItemsVariants"]
    preview_background_color: Optional[
        "MoveAssetsMoveAssetsAssetsRelatedAssetsItemsPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsTags(BaseModel):
    value: str
    source: Optional[TagSource]


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsWorkflowTask(BaseModel):
    id: str
    title: Optional[str]
    description: Optional[str]


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class MoveAssetsMoveAssetsAssetsRelatedAssetsItemsPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class MoveAssetsMoveAssetsAssetsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["MoveAssetsMoveAssetsAssetsCommentsItems"]]]


class MoveAssetsMoveAssetsAssetsCommentsItems(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    content: str
    mentioned_users: List[
        Optional["MoveAssetsMoveAssetsAssetsCommentsItemsMentionedUsers"]
    ] = Field(alias="mentionedUsers")
    is_resolved: bool = Field(alias="isResolved")
    replies: "MoveAssetsMoveAssetsAssetsCommentsItemsReplies"


class MoveAssetsMoveAssetsAssetsCommentsItemsMentionedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsCommentsItemsReplies(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class MoveAssetsMoveAssetsAssetsCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class MoveAssetsMoveAssetsAssetsCustomMetadata(BaseModel):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "MoveAssetsMoveAssetsAssetsCustomMetadataProperty"


class MoveAssetsMoveAssetsAssetsCustomMetadataProperty(BaseModel):
    id: str
    creator: "MoveAssetsMoveAssetsAssetsCustomMetadataPropertyCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["MoveAssetsMoveAssetsAssetsCustomMetadataPropertyModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    type: "MoveAssetsMoveAssetsAssetsCustomMetadataPropertyType"
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class MoveAssetsMoveAssetsAssetsCustomMetadataPropertyCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsCustomMetadataPropertyModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsCustomMetadataPropertyType(BaseModel):
    typename__: Literal[
        "CustomMetadataPropertyType",
        "CustomMetadataPropertyTypeDate",
        "CustomMetadataPropertyTypeLongText",
        "CustomMetadataPropertyTypeMultiSelect",
        "CustomMetadataPropertyTypeNumber",
        "CustomMetadataPropertyTypeSelect",
        "CustomMetadataPropertyTypeText",
        "CustomMetadataPropertyTypeUrl",
    ] = Field(alias="__typename")
    name: str


class MoveAssetsMoveAssetsAssetsWorkflowTask(BaseModel):
    id: str
    assigned_users: List[
        Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskAssignedUsers"]
    ] = Field(alias="assignedUsers")
    asset: Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskAsset"]
    title: Optional[str]
    description: Optional[str]
    status: "MoveAssetsMoveAssetsAssetsWorkflowTaskStatus"
    checklist_item: "MoveAssetsMoveAssetsAssetsWorkflowTaskChecklistItem" = Field(
        alias="checklistItem"
    )


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsWorkflowTaskAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "MoveAssetsMoveAssetsAssetsWorkflowTaskAssetCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskAssetModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskAssetAttachments"]]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskAssetTags"]]]
    copyright: Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskAssetCopyright"]
    availability: "MoveAssetsMoveAssetsAssetsWorkflowTaskAssetAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskAssetLicenses"]]
    ]
    status: AssetStatusType
    related_assets: "MoveAssetsMoveAssetsAssetsWorkflowTaskAssetRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskAssetComments"]
    current_user_permissions: (
        "MoveAssetsMoveAssetsAssetsWorkflowTaskAssetCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    workflow_task: Optional[
        "MoveAssetsMoveAssetsAssetsWorkflowTaskAssetWorkflowTask"
    ] = Field(alias="workflowTask")
    variants: Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskAssetVariants"]
    preview_background_color: Optional[
        "MoveAssetsMoveAssetsAssetsWorkflowTaskAssetPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetTags(BaseModel):
    value: str
    source: Optional[TagSource]


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetWorkflowTask(BaseModel):
    id: str
    title: Optional[str]
    description: Optional[str]


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class MoveAssetsMoveAssetsAssetsWorkflowTaskAssetPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class MoveAssetsMoveAssetsAssetsWorkflowTaskStatus(BaseModel):
    id: str
    name: str
    color: "MoveAssetsMoveAssetsAssetsWorkflowTaskStatusColor"
    assigned_users: List[
        Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskStatusAssignedUsers"]
    ] = Field(alias="assignedUsers")
    checklist_presets: List[
        Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskStatusChecklistPresets"]
    ] = Field(alias="checklistPresets")
    tasks: "MoveAssetsMoveAssetsAssetsWorkflowTaskStatusTasks"
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class MoveAssetsMoveAssetsAssetsWorkflowTaskStatusColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class MoveAssetsMoveAssetsAssetsWorkflowTaskStatusAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsWorkflowTaskStatusChecklistPresets(BaseModel):
    id: str
    content: str


class MoveAssetsMoveAssetsAssetsWorkflowTaskStatusTasks(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class MoveAssetsMoveAssetsAssetsWorkflowTaskChecklistItem(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["MoveAssetsMoveAssetsAssetsWorkflowTaskChecklistItemItems"]]
    ]


class MoveAssetsMoveAssetsAssetsWorkflowTaskChecklistItemItems(BaseModel):
    id: str
    content: str


class MoveAssetsMoveAssetsAssetsVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: List[Optional["MoveAssetsMoveAssetsAssetsVariantsItems"]]


class MoveAssetsMoveAssetsAssetsVariantsItems(BaseModel):
    key: str
    filename: Optional[str]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class MoveAssetsMoveAssetsAssetsLocation(BaseModel):
    brand: Optional["MoveAssetsMoveAssetsAssetsLocationBrand"]
    library: Optional["MoveAssetsMoveAssetsAssetsLocationLibrary"]
    workspace_project: Optional[
        "MoveAssetsMoveAssetsAssetsLocationWorkspaceProject"
    ] = Field(alias="workspaceProject")
    folder: Optional["MoveAssetsMoveAssetsAssetsLocationFolder"]


class MoveAssetsMoveAssetsAssetsLocationBrand(BaseModel):
    id: str
    name: str


class MoveAssetsMoveAssetsAssetsLocationLibrary(BaseModel):
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsLocationWorkspaceProject(BaseModel):
    id: str
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsLocationFolder(BaseModel):
    id: str
    name: str
    breadcrumbs: List["MoveAssetsMoveAssetsAssetsLocationFolderBreadcrumbs"]


class MoveAssetsMoveAssetsAssetsLocationFolderBreadcrumbs(BaseModel):
    id: Optional[str]
    name: Optional[str]


class MoveAssetsMoveAssetsAssetsPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


MoveAssets.model_rebuild()
MoveAssetsMoveAssets.model_rebuild()
MoveAssetsMoveAssetsAssets.model_rebuild()
MoveAssetsMoveAssetsAssetsAttachments.model_rebuild()
MoveAssetsMoveAssetsAssetsRelatedAssets.model_rebuild()
MoveAssetsMoveAssetsAssetsRelatedAssetsItems.model_rebuild()
MoveAssetsMoveAssetsAssetsComments.model_rebuild()
MoveAssetsMoveAssetsAssetsCommentsItems.model_rebuild()
MoveAssetsMoveAssetsAssetsCustomMetadata.model_rebuild()
MoveAssetsMoveAssetsAssetsCustomMetadataProperty.model_rebuild()
MoveAssetsMoveAssetsAssetsWorkflowTask.model_rebuild()
MoveAssetsMoveAssetsAssetsWorkflowTaskAsset.model_rebuild()
MoveAssetsMoveAssetsAssetsWorkflowTaskStatus.model_rebuild()
MoveAssetsMoveAssetsAssetsWorkflowTaskChecklistItem.model_rebuild()
MoveAssetsMoveAssetsAssetsVariants.model_rebuild()
MoveAssetsMoveAssetsAssetsLocation.model_rebuild()
MoveAssetsMoveAssetsAssetsLocationFolder.model_rebuild()
