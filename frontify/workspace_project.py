# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType, CopyrightStatus, TagSource, WorkflowStatusEnterRule


class WorkspaceProject(BaseModel):
    workspace_project: Optional["WorkspaceProjectWorkspaceProject"] = Field(
        alias="workspaceProject"
    )


class WorkspaceProjectWorkspaceProject(BaseModel):
    id: str
    name: str
    color: Optional["WorkspaceProjectWorkspaceProjectColor"]
    assets: "WorkspaceProjectWorkspaceProjectAssets"
    licenses: Optional[List[Optional["WorkspaceProjectWorkspaceProjectLicenses"]]]
    workflow: "WorkspaceProjectWorkspaceProjectWorkflow"
    browse: "WorkspaceProjectWorkspaceProjectBrowse"
    collaborators: Optional["WorkspaceProjectWorkspaceProjectCollaborators"]
    current_user_permissions: (
        "WorkspaceProjectWorkspaceProjectCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    is_archived: bool = Field(alias="isArchived")


class WorkspaceProjectWorkspaceProjectColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class WorkspaceProjectWorkspaceProjectAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["WorkspaceProjectWorkspaceProjectAssetsItems"]]]


class WorkspaceProjectWorkspaceProjectAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "WorkspaceProjectWorkspaceProjectAssetsItemsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["WorkspaceProjectWorkspaceProjectAssetsItemsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[Optional["WorkspaceProjectWorkspaceProjectAssetsItemsAttachments"]]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["WorkspaceProjectWorkspaceProjectAssetsItemsTags"]]]
    copyright: Optional["WorkspaceProjectWorkspaceProjectAssetsItemsCopyright"]
    availability: "WorkspaceProjectWorkspaceProjectAssetsItemsAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[Optional["WorkspaceProjectWorkspaceProjectAssetsItemsLicenses"]]
    ]
    status: AssetStatusType
    related_assets: "WorkspaceProjectWorkspaceProjectAssetsItemsRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["WorkspaceProjectWorkspaceProjectAssetsItemsComments"]
    current_user_permissions: (
        "WorkspaceProjectWorkspaceProjectAssetsItemsCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    custom_metadata: List[
        "WorkspaceProjectWorkspaceProjectAssetsItemsCustomMetadata"
    ] = Field(alias="customMetadata")
    workflow_task: Optional[
        "WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTask"
    ] = Field(alias="workflowTask")
    variants: Optional["WorkspaceProjectWorkspaceProjectAssetsItemsVariants"]
    location: "WorkspaceProjectWorkspaceProjectAssetsItemsLocation"
    preview_background_color: Optional[
        "WorkspaceProjectWorkspaceProjectAssetsItemsPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class WorkspaceProjectWorkspaceProjectAssetsItemsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectAssetsItemsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectAssetsItemsAttachments(BaseModel):
    id: str
    creator: "WorkspaceProjectWorkspaceProjectAssetsItemsAttachmentsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["WorkspaceProjectWorkspaceProjectAssetsItemsAttachmentsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class WorkspaceProjectWorkspaceProjectAssetsItemsAttachmentsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectAssetsItemsAttachmentsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectAssetsItemsTags(BaseModel):
    value: str
    source: Optional[TagSource]


class WorkspaceProjectWorkspaceProjectAssetsItemsCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class WorkspaceProjectWorkspaceProjectAssetsItemsAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class WorkspaceProjectWorkspaceProjectAssetsItemsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class WorkspaceProjectWorkspaceProjectAssetsItemsRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["WorkspaceProjectWorkspaceProjectAssetsItemsRelatedAssetsItems"]]
    ]


class WorkspaceProjectWorkspaceProjectAssetsItemsRelatedAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class WorkspaceProjectWorkspaceProjectAssetsItemsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["WorkspaceProjectWorkspaceProjectAssetsItemsCommentsItems"]]
    ]


class WorkspaceProjectWorkspaceProjectAssetsItemsCommentsItems(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    content: str
    is_resolved: bool = Field(alias="isResolved")


class WorkspaceProjectWorkspaceProjectAssetsItemsCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class WorkspaceProjectWorkspaceProjectAssetsItemsCustomMetadata(BaseModel):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "WorkspaceProjectWorkspaceProjectAssetsItemsCustomMetadataProperty"


class WorkspaceProjectWorkspaceProjectAssetsItemsCustomMetadataProperty(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTask(BaseModel):
    id: str
    assigned_users: List[
        Optional["WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTaskAssignedUsers"]
    ] = Field(alias="assignedUsers")
    asset: Optional["WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTaskAsset"]
    title: Optional[str]
    description: Optional[str]
    status: "WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTaskStatus"
    checklist_item: (
        "WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTaskChecklistItem"
    ) = Field(alias="checklistItem")


class WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTaskAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTaskAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTaskStatus(BaseModel):
    id: str
    name: str
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTaskChecklistItem(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class WorkspaceProjectWorkspaceProjectAssetsItemsVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: List[Optional["WorkspaceProjectWorkspaceProjectAssetsItemsVariantsItems"]]


class WorkspaceProjectWorkspaceProjectAssetsItemsVariantsItems(BaseModel):
    key: str
    filename: Optional[str]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class WorkspaceProjectWorkspaceProjectAssetsItemsLocation(BaseModel):
    brand: Optional["WorkspaceProjectWorkspaceProjectAssetsItemsLocationBrand"]
    library: Optional["WorkspaceProjectWorkspaceProjectAssetsItemsLocationLibrary"]
    workspace_project: Optional[
        "WorkspaceProjectWorkspaceProjectAssetsItemsLocationWorkspaceProject"
    ] = Field(alias="workspaceProject")
    folder: Optional["WorkspaceProjectWorkspaceProjectAssetsItemsLocationFolder"]


class WorkspaceProjectWorkspaceProjectAssetsItemsLocationBrand(BaseModel):
    id: str
    name: str


class WorkspaceProjectWorkspaceProjectAssetsItemsLocationLibrary(BaseModel):
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectAssetsItemsLocationWorkspaceProject(BaseModel):
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectAssetsItemsLocationFolder(BaseModel):
    id: str
    name: str


class WorkspaceProjectWorkspaceProjectAssetsItemsPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class WorkspaceProjectWorkspaceProjectLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class WorkspaceProjectWorkspaceProjectWorkflow(BaseModel):
    id: str
    statuses: List[Optional["WorkspaceProjectWorkspaceProjectWorkflowStatuses"]]


class WorkspaceProjectWorkspaceProjectWorkflowStatuses(BaseModel):
    id: str
    name: str
    color: "WorkspaceProjectWorkspaceProjectWorkflowStatusesColor"
    assigned_users: List[
        Optional["WorkspaceProjectWorkspaceProjectWorkflowStatusesAssignedUsers"]
    ] = Field(alias="assignedUsers")
    checklist_presets: List[
        Optional["WorkspaceProjectWorkspaceProjectWorkflowStatusesChecklistPresets"]
    ] = Field(alias="checklistPresets")
    tasks: "WorkspaceProjectWorkspaceProjectWorkflowStatusesTasks"
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class WorkspaceProjectWorkspaceProjectWorkflowStatusesColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class WorkspaceProjectWorkspaceProjectWorkflowStatusesAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectWorkflowStatusesChecklistPresets(BaseModel):
    id: str
    content: str
    assigned_user: Optional[
        "WorkspaceProjectWorkspaceProjectWorkflowStatusesChecklistPresetsAssignedUser"
    ] = Field(alias="assignedUser")


class WorkspaceProjectWorkspaceProjectWorkflowStatusesChecklistPresetsAssignedUser(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectWorkflowStatusesTasks(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["WorkspaceProjectWorkspaceProjectWorkflowStatusesTasksItems"]]
    ]


class WorkspaceProjectWorkspaceProjectWorkflowStatusesTasksItems(BaseModel):
    id: str
    title: Optional[str]
    description: Optional[str]


class WorkspaceProjectWorkspaceProjectBrowse(BaseModel):
    folders: "WorkspaceProjectWorkspaceProjectBrowseFolders"
    assets: "WorkspaceProjectWorkspaceProjectBrowseAssets"


class WorkspaceProjectWorkspaceProjectBrowseFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["WorkspaceProjectWorkspaceProjectBrowseFoldersItems"]]
    ]


class WorkspaceProjectWorkspaceProjectBrowseFoldersItems(BaseModel):
    typename__: Literal["Folder", "SubFolder"] = Field(alias="__typename")
    id: str
    name: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    breadcrumbs: List["WorkspaceProjectWorkspaceProjectBrowseFoldersItemsBreadcrumbs"]
    folders: "WorkspaceProjectWorkspaceProjectBrowseFoldersItemsFolders"
    assets: "WorkspaceProjectWorkspaceProjectBrowseFoldersItemsAssets"


class WorkspaceProjectWorkspaceProjectBrowseFoldersItemsBreadcrumbs(BaseModel):
    id: Optional[str]
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectBrowseFoldersItemsFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class WorkspaceProjectWorkspaceProjectBrowseFoldersItemsAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class WorkspaceProjectWorkspaceProjectBrowseAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class WorkspaceProjectWorkspaceProjectCollaborators(BaseModel):
    users: "WorkspaceProjectWorkspaceProjectCollaboratorsUsers"


class WorkspaceProjectWorkspaceProjectCollaboratorsUsers(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["WorkspaceProjectWorkspaceProjectCollaboratorsUsersItems"]]
    ]
    edges: List["WorkspaceProjectWorkspaceProjectCollaboratorsUsersEdges"]


class WorkspaceProjectWorkspaceProjectCollaboratorsUsersItems(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectCollaboratorsUsersEdges(BaseModel):
    node: "WorkspaceProjectWorkspaceProjectCollaboratorsUsersEdgesNode"
    role: str


class WorkspaceProjectWorkspaceProjectCollaboratorsUsersEdgesNode(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class WorkspaceProjectWorkspaceProjectCurrentUserPermissions(BaseModel):
    can_create_assets: bool = Field(alias="canCreateAssets")
    can_view_collaborators: bool = Field(alias="canViewCollaborators")


WorkspaceProject.model_rebuild()
WorkspaceProjectWorkspaceProject.model_rebuild()
WorkspaceProjectWorkspaceProjectAssets.model_rebuild()
WorkspaceProjectWorkspaceProjectAssetsItems.model_rebuild()
WorkspaceProjectWorkspaceProjectAssetsItemsAttachments.model_rebuild()
WorkspaceProjectWorkspaceProjectAssetsItemsRelatedAssets.model_rebuild()
WorkspaceProjectWorkspaceProjectAssetsItemsComments.model_rebuild()
WorkspaceProjectWorkspaceProjectAssetsItemsCustomMetadata.model_rebuild()
WorkspaceProjectWorkspaceProjectAssetsItemsWorkflowTask.model_rebuild()
WorkspaceProjectWorkspaceProjectAssetsItemsVariants.model_rebuild()
WorkspaceProjectWorkspaceProjectAssetsItemsLocation.model_rebuild()
WorkspaceProjectWorkspaceProjectWorkflow.model_rebuild()
WorkspaceProjectWorkspaceProjectWorkflowStatuses.model_rebuild()
WorkspaceProjectWorkspaceProjectWorkflowStatusesChecklistPresets.model_rebuild()
WorkspaceProjectWorkspaceProjectWorkflowStatusesTasks.model_rebuild()
WorkspaceProjectWorkspaceProjectBrowse.model_rebuild()
WorkspaceProjectWorkspaceProjectBrowseFolders.model_rebuild()
WorkspaceProjectWorkspaceProjectBrowseFoldersItems.model_rebuild()
WorkspaceProjectWorkspaceProjectCollaborators.model_rebuild()
WorkspaceProjectWorkspaceProjectCollaboratorsUsers.model_rebuild()
WorkspaceProjectWorkspaceProjectCollaboratorsUsersEdges.model_rebuild()
