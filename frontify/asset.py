# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType, CopyrightStatus, TagSource, WorkflowStatusEnterRule


class Asset(BaseModel):
    asset: Optional["AssetAsset"]


class AssetAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "AssetAssetCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["AssetAssetModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[List[Optional["AssetAssetAttachments"]]]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["AssetAssetTags"]]]
    copyright: Optional["AssetAssetCopyright"]
    availability: "AssetAssetAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[List[Optional["AssetAssetLicenses"]]]
    status: AssetStatusType
    related_assets: "AssetAssetRelatedAssets" = Field(alias="relatedAssets")
    comments: Optional["AssetAssetComments"]
    current_user_permissions: "AssetAssetCurrentUserPermissions" = Field(
        alias="currentUserPermissions"
    )
    workflow_task: Optional["AssetAssetWorkflowTask"] = Field(alias="workflowTask")
    variants: Optional["AssetAssetVariants"]
    preview_background_color: Optional["AssetAssetPreviewBackgroundColor"] = Field(
        alias="previewBackgroundColor"
    )


class AssetAssetCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AssetAssetModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AssetAssetAttachments(BaseModel):
    id: str
    creator: "AssetAssetAttachmentsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["AssetAssetAttachmentsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class AssetAssetAttachmentsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AssetAssetAttachmentsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AssetAssetTags(BaseModel):
    value: str
    source: Optional[TagSource]


class AssetAssetCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class AssetAssetAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class AssetAssetLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class AssetAssetRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["AssetAssetRelatedAssetsItems"]]]


class AssetAssetRelatedAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "AssetAssetRelatedAssetsItemsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["AssetAssetRelatedAssetsItemsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[List[Optional["AssetAssetRelatedAssetsItemsAttachments"]]]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["AssetAssetRelatedAssetsItemsTags"]]]
    copyright: Optional["AssetAssetRelatedAssetsItemsCopyright"]
    availability: "AssetAssetRelatedAssetsItemsAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[List[Optional["AssetAssetRelatedAssetsItemsLicenses"]]]
    status: AssetStatusType
    related_assets: "AssetAssetRelatedAssetsItemsRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["AssetAssetRelatedAssetsItemsComments"]
    current_user_permissions: "AssetAssetRelatedAssetsItemsCurrentUserPermissions" = (
        Field(alias="currentUserPermissions")
    )
    custom_metadata: List["AssetAssetRelatedAssetsItemsCustomMetadata"] = Field(
        alias="customMetadata"
    )
    workflow_task: Optional["AssetAssetRelatedAssetsItemsWorkflowTask"] = Field(
        alias="workflowTask"
    )
    variants: Optional["AssetAssetRelatedAssetsItemsVariants"]
    location: "AssetAssetRelatedAssetsItemsLocation"
    preview_background_color: Optional[
        "AssetAssetRelatedAssetsItemsPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class AssetAssetRelatedAssetsItemsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AssetAssetRelatedAssetsItemsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AssetAssetRelatedAssetsItemsAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class AssetAssetRelatedAssetsItemsTags(BaseModel):
    value: str
    source: Optional[TagSource]


class AssetAssetRelatedAssetsItemsCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class AssetAssetRelatedAssetsItemsAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class AssetAssetRelatedAssetsItemsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class AssetAssetRelatedAssetsItemsRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class AssetAssetRelatedAssetsItemsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["AssetAssetRelatedAssetsItemsCommentsItems"]]]


class AssetAssetRelatedAssetsItemsCommentsItems(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    content: str
    is_resolved: bool = Field(alias="isResolved")


class AssetAssetRelatedAssetsItemsCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class AssetAssetRelatedAssetsItemsCustomMetadata(BaseModel):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "AssetAssetRelatedAssetsItemsCustomMetadataProperty"


class AssetAssetRelatedAssetsItemsCustomMetadataProperty(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class AssetAssetRelatedAssetsItemsWorkflowTask(BaseModel):
    id: str
    assigned_users: List[
        Optional["AssetAssetRelatedAssetsItemsWorkflowTaskAssignedUsers"]
    ] = Field(alias="assignedUsers")
    asset: Optional["AssetAssetRelatedAssetsItemsWorkflowTaskAsset"]
    title: Optional[str]
    description: Optional[str]
    status: "AssetAssetRelatedAssetsItemsWorkflowTaskStatus"
    checklist_item: "AssetAssetRelatedAssetsItemsWorkflowTaskChecklistItem" = Field(
        alias="checklistItem"
    )


class AssetAssetRelatedAssetsItemsWorkflowTaskAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class AssetAssetRelatedAssetsItemsWorkflowTaskAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class AssetAssetRelatedAssetsItemsWorkflowTaskStatus(BaseModel):
    id: str
    name: str
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class AssetAssetRelatedAssetsItemsWorkflowTaskChecklistItem(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class AssetAssetRelatedAssetsItemsVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: List[Optional["AssetAssetRelatedAssetsItemsVariantsItems"]]


class AssetAssetRelatedAssetsItemsVariantsItems(BaseModel):
    key: str
    filename: Optional[str]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class AssetAssetRelatedAssetsItemsLocation(BaseModel):
    brand: Optional["AssetAssetRelatedAssetsItemsLocationBrand"]
    library: Optional["AssetAssetRelatedAssetsItemsLocationLibrary"]
    workspace_project: Optional[
        "AssetAssetRelatedAssetsItemsLocationWorkspaceProject"
    ] = Field(alias="workspaceProject")
    folder: Optional["AssetAssetRelatedAssetsItemsLocationFolder"]


class AssetAssetRelatedAssetsItemsLocationBrand(BaseModel):
    id: str
    name: str


class AssetAssetRelatedAssetsItemsLocationLibrary(BaseModel):
    id: str
    name: Optional[str]


class AssetAssetRelatedAssetsItemsLocationWorkspaceProject(BaseModel):
    id: str
    name: Optional[str]


class AssetAssetRelatedAssetsItemsLocationFolder(BaseModel):
    id: str
    name: str


class AssetAssetRelatedAssetsItemsPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class AssetAssetComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class AssetAssetCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class AssetAssetWorkflowTask(BaseModel):
    id: str
    title: Optional[str]
    description: Optional[str]


class AssetAssetVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class AssetAssetPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


Asset.model_rebuild()
AssetAsset.model_rebuild()
AssetAssetAttachments.model_rebuild()
AssetAssetRelatedAssets.model_rebuild()
AssetAssetRelatedAssetsItems.model_rebuild()
AssetAssetRelatedAssetsItemsComments.model_rebuild()
AssetAssetRelatedAssetsItemsCustomMetadata.model_rebuild()
AssetAssetRelatedAssetsItemsWorkflowTask.model_rebuild()
AssetAssetRelatedAssetsItemsVariants.model_rebuild()
AssetAssetRelatedAssetsItemsLocation.model_rebuild()
