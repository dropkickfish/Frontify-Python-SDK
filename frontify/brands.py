# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AssetStatusType,
    CopyrightStatus,
    CreativeTemplateVariableType,
    LanguageCode,
    LibraryType,
    TagSource,
    WorkflowStatusEnterRule,
)


class Brands(BaseModel):
    brands: Optional[List[Optional["BrandsBrands"]]]


class BrandsBrands(BaseModel):
    id: str
    name: str
    rgba_color: Optional["BrandsBrandsRgbaColor"] = Field(alias="rgbaColor")
    avatar: Optional[Any]
    slug: Optional[str]
    search: Optional["BrandsBrandsSearch"]
    libraries: Optional["BrandsBrandsLibraries"]
    workspace_projects: Optional["BrandsBrandsWorkspaceProjects"] = Field(
        alias="workspaceProjects"
    )
    guidelines: Optional["BrandsBrandsGuidelines"]
    custom_metadata_properties: List["BrandsBrandsCustomMetadataProperties"] = Field(
        alias="customMetadataProperties"
    )
    creative_templates: "BrandsBrandsCreativeTemplates" = Field(
        alias="creativeTemplates"
    )


class BrandsBrandsRgbaColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandsBrandsSearch(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional[
                Annotated[
                    Union[
                        "BrandsBrandsSearchItemsAudio",
                        "BrandsBrandsSearchItemsDocument",
                        "BrandsBrandsSearchItemsEmbeddedContent",
                        "BrandsBrandsSearchItemsFile",
                        "BrandsBrandsSearchItemsImage",
                        "BrandsBrandsSearchItemsVideo",
                    ],
                    Field(discriminator="typename__"),
                ]
            ]
        ]
    ]
    edges: Optional[List[Optional["BrandsBrandsSearchEdges"]]]


class BrandsBrandsSearchItemsAudio(BaseModel):
    typename__: Literal["Audio"] = Field(alias="__typename")
    id: str
    creator: "BrandsBrandsSearchItemsAudioCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandsBrandsSearchItemsAudioModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    attachments: Optional[List[Optional["BrandsBrandsSearchItemsAudioAttachments"]]]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["BrandsBrandsSearchItemsAudioTags"]]]
    external_products: Optional[
        List[Optional["BrandsBrandsSearchItemsAudioExternalProducts"]]
    ] = Field(alias="externalProducts")
    copyright: Optional["BrandsBrandsSearchItemsAudioCopyright"]
    availability: "BrandsBrandsSearchItemsAudioAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[List[Optional["BrandsBrandsSearchItemsAudioLicenses"]]]
    author: Optional[str]
    status: AssetStatusType
    related_assets: "BrandsBrandsSearchItemsAudioRelatedAssets" = Field(
        alias="relatedAssets"
    )
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    download_url: Optional[Any] = Field(alias="downloadUrl")
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")


class BrandsBrandsSearchItemsAudioCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsSearchItemsAudioModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsSearchItemsAudioAttachments(BaseModel):
    id: str
    creator: "BrandsBrandsSearchItemsAudioAttachmentsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandsBrandsSearchItemsAudioAttachmentsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class BrandsBrandsSearchItemsAudioAttachmentsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsSearchItemsAudioAttachmentsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsSearchItemsAudioTags(BaseModel):
    value: str
    source: Optional[TagSource]


class BrandsBrandsSearchItemsAudioExternalProducts(BaseModel):
    id: str
    name: str
    external_id: Optional[str] = Field(alias="externalId")
    title: Optional[str]


class BrandsBrandsSearchItemsAudioCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class BrandsBrandsSearchItemsAudioAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class BrandsBrandsSearchItemsAudioLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class BrandsBrandsSearchItemsAudioRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsSearchItemsAudioRelatedAssetsItems"]]]


class BrandsBrandsSearchItemsAudioRelatedAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType
    comments: Optional["BrandsBrandsSearchItemsAudioRelatedAssetsItemsComments"]
    current_user_permissions: (
        "BrandsBrandsSearchItemsAudioRelatedAssetsItemsCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    workflow_task: Optional[
        "BrandsBrandsSearchItemsAudioRelatedAssetsItemsWorkflowTask"
    ] = Field(alias="workflowTask")
    variants: Optional["BrandsBrandsSearchItemsAudioRelatedAssetsItemsVariants"]
    preview_background_color: Optional[
        "BrandsBrandsSearchItemsAudioRelatedAssetsItemsPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class BrandsBrandsSearchItemsAudioRelatedAssetsItemsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandsBrandsSearchItemsAudioRelatedAssetsItemsCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class BrandsBrandsSearchItemsAudioRelatedAssetsItemsWorkflowTask(BaseModel):
    id: str
    title: Optional[str]
    description: Optional[str]


class BrandsBrandsSearchItemsAudioRelatedAssetsItemsVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandsBrandsSearchItemsAudioRelatedAssetsItemsPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandsBrandsSearchItemsDocument(BaseModel):
    typename__: Literal["Document"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int
    page_count: Optional[int] = Field(alias="pageCount")


class BrandsBrandsSearchItemsEmbeddedContent(BaseModel):
    typename__: Literal["EmbeddedContent"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")


class BrandsBrandsSearchItemsFile(BaseModel):
    typename__: Literal["File"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")


class BrandsBrandsSearchItemsImage(BaseModel):
    typename__: Literal["Image"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int


class BrandsBrandsSearchItemsVideo(BaseModel):
    typename__: Literal["Video"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    width: int
    height: int
    duration: float
    bitrate: int


class BrandsBrandsSearchEdges(BaseModel):
    title: str
    node: Optional[
        Annotated[
            Union[
                "BrandsBrandsSearchEdgesNodeAudio",
                "BrandsBrandsSearchEdgesNodeDocument",
                "BrandsBrandsSearchEdgesNodeEmbeddedContent",
                "BrandsBrandsSearchEdgesNodeFile",
                "BrandsBrandsSearchEdgesNodeImage",
                "BrandsBrandsSearchEdgesNodeVideo",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class BrandsBrandsSearchEdgesNodeAudio(BaseModel):
    typename__: Literal["Audio"] = Field(alias="__typename")
    id: str
    creator: "BrandsBrandsSearchEdgesNodeAudioCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandsBrandsSearchEdgesNodeAudioModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    attachments: Optional[List[Optional["BrandsBrandsSearchEdgesNodeAudioAttachments"]]]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["BrandsBrandsSearchEdgesNodeAudioTags"]]]
    external_products: Optional[
        List[Optional["BrandsBrandsSearchEdgesNodeAudioExternalProducts"]]
    ] = Field(alias="externalProducts")
    copyright: Optional["BrandsBrandsSearchEdgesNodeAudioCopyright"]
    availability: "BrandsBrandsSearchEdgesNodeAudioAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[List[Optional["BrandsBrandsSearchEdgesNodeAudioLicenses"]]]
    author: Optional[str]
    status: AssetStatusType
    related_assets: "BrandsBrandsSearchEdgesNodeAudioRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["BrandsBrandsSearchEdgesNodeAudioComments"]
    current_user_permissions: (
        "BrandsBrandsSearchEdgesNodeAudioCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    custom_metadata: List["BrandsBrandsSearchEdgesNodeAudioCustomMetadata"] = Field(
        alias="customMetadata"
    )
    workflow_task: Optional["BrandsBrandsSearchEdgesNodeAudioWorkflowTask"] = Field(
        alias="workflowTask"
    )
    variants: Optional["BrandsBrandsSearchEdgesNodeAudioVariants"]
    location: "BrandsBrandsSearchEdgesNodeAudioLocation"
    preview_background_color: Optional[
        "BrandsBrandsSearchEdgesNodeAudioPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    download_url: Optional[Any] = Field(alias="downloadUrl")
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")


class BrandsBrandsSearchEdgesNodeAudioCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsSearchEdgesNodeAudioModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsSearchEdgesNodeAudioAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class BrandsBrandsSearchEdgesNodeAudioTags(BaseModel):
    value: str
    source: Optional[TagSource]


class BrandsBrandsSearchEdgesNodeAudioExternalProducts(BaseModel):
    id: str
    name: str
    external_id: Optional[str] = Field(alias="externalId")
    title: Optional[str]


class BrandsBrandsSearchEdgesNodeAudioCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class BrandsBrandsSearchEdgesNodeAudioAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class BrandsBrandsSearchEdgesNodeAudioLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class BrandsBrandsSearchEdgesNodeAudioRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandsBrandsSearchEdgesNodeAudioComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsSearchEdgesNodeAudioCommentsItems"]]]


class BrandsBrandsSearchEdgesNodeAudioCommentsItems(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    content: str
    is_resolved: bool = Field(alias="isResolved")


class BrandsBrandsSearchEdgesNodeAudioCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class BrandsBrandsSearchEdgesNodeAudioCustomMetadata(BaseModel):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "BrandsBrandsSearchEdgesNodeAudioCustomMetadataProperty"


class BrandsBrandsSearchEdgesNodeAudioCustomMetadataProperty(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class BrandsBrandsSearchEdgesNodeAudioWorkflowTask(BaseModel):
    id: str
    assigned_users: List[
        Optional["BrandsBrandsSearchEdgesNodeAudioWorkflowTaskAssignedUsers"]
    ] = Field(alias="assignedUsers")
    asset: Optional["BrandsBrandsSearchEdgesNodeAudioWorkflowTaskAsset"]
    title: Optional[str]
    description: Optional[str]
    status: "BrandsBrandsSearchEdgesNodeAudioWorkflowTaskStatus"
    checklist_item: "BrandsBrandsSearchEdgesNodeAudioWorkflowTaskChecklistItem" = Field(
        alias="checklistItem"
    )


class BrandsBrandsSearchEdgesNodeAudioWorkflowTaskAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsSearchEdgesNodeAudioWorkflowTaskAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class BrandsBrandsSearchEdgesNodeAudioWorkflowTaskStatus(BaseModel):
    id: str
    name: str
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class BrandsBrandsSearchEdgesNodeAudioWorkflowTaskChecklistItem(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandsBrandsSearchEdgesNodeAudioVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: List[Optional["BrandsBrandsSearchEdgesNodeAudioVariantsItems"]]


class BrandsBrandsSearchEdgesNodeAudioVariantsItems(BaseModel):
    key: str
    filename: Optional[str]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class BrandsBrandsSearchEdgesNodeAudioLocation(BaseModel):
    brand: Optional["BrandsBrandsSearchEdgesNodeAudioLocationBrand"]
    library: Optional["BrandsBrandsSearchEdgesNodeAudioLocationLibrary"]
    workspace_project: Optional[
        "BrandsBrandsSearchEdgesNodeAudioLocationWorkspaceProject"
    ] = Field(alias="workspaceProject")
    folder: Optional["BrandsBrandsSearchEdgesNodeAudioLocationFolder"]


class BrandsBrandsSearchEdgesNodeAudioLocationBrand(BaseModel):
    id: str
    name: str


class BrandsBrandsSearchEdgesNodeAudioLocationLibrary(BaseModel):
    id: str
    name: Optional[str]


class BrandsBrandsSearchEdgesNodeAudioLocationWorkspaceProject(BaseModel):
    id: str
    name: Optional[str]


class BrandsBrandsSearchEdgesNodeAudioLocationFolder(BaseModel):
    id: str
    name: str


class BrandsBrandsSearchEdgesNodeAudioPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandsBrandsSearchEdgesNodeDocument(BaseModel):
    typename__: Literal["Document"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int
    page_count: Optional[int] = Field(alias="pageCount")


class BrandsBrandsSearchEdgesNodeEmbeddedContent(BaseModel):
    typename__: Literal["EmbeddedContent"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")


class BrandsBrandsSearchEdgesNodeFile(BaseModel):
    typename__: Literal["File"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")


class BrandsBrandsSearchEdgesNodeImage(BaseModel):
    typename__: Literal["Image"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int


class BrandsBrandsSearchEdgesNodeVideo(BaseModel):
    typename__: Literal["Video"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    width: int
    height: int
    duration: float
    bitrate: int


class BrandsBrandsLibraries(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsLibrariesItems"]]]


class BrandsBrandsLibrariesItems(BaseModel):
    typename__: Literal[
        "DocumentLibrary", "IconLibrary", "Library", "LogoLibrary", "MediaLibrary"
    ] = Field(alias="__typename")
    id: str
    name: str
    color: Optional["BrandsBrandsLibrariesItemsColor"]
    assets: "BrandsBrandsLibrariesItemsAssets"
    collections: "BrandsBrandsLibrariesItemsCollections"
    browse: "BrandsBrandsLibrariesItemsBrowse"
    collaborators: Optional["BrandsBrandsLibrariesItemsCollaborators"]
    workflow: "BrandsBrandsLibrariesItemsWorkflow"
    custom_metadata_properties: List[
        "BrandsBrandsLibrariesItemsCustomMetadataProperties"
    ] = Field(alias="customMetadataProperties")
    asset_submission_requests: List[
        "BrandsBrandsLibrariesItemsAssetSubmissionRequests"
    ] = Field(alias="assetSubmissionRequests")


class BrandsBrandsLibrariesItemsColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandsBrandsLibrariesItemsAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsLibrariesItemsAssetsItems"]]]


class BrandsBrandsLibrariesItemsAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class BrandsBrandsLibrariesItemsCollections(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsLibrariesItemsCollectionsItems"]]]


class BrandsBrandsLibrariesItemsCollectionsItems(BaseModel):
    id: str
    name: str


class BrandsBrandsLibrariesItemsBrowse(BaseModel):
    folders: "BrandsBrandsLibrariesItemsBrowseFolders"
    assets: "BrandsBrandsLibrariesItemsBrowseAssets"


class BrandsBrandsLibrariesItemsBrowseFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandsBrandsLibrariesItemsBrowseAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandsBrandsLibrariesItemsCollaborators(BaseModel):
    users: "BrandsBrandsLibrariesItemsCollaboratorsUsers"


class BrandsBrandsLibrariesItemsCollaboratorsUsers(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandsBrandsLibrariesItemsWorkflow(BaseModel):
    id: str
    statuses: List[Optional["BrandsBrandsLibrariesItemsWorkflowStatuses"]]


class BrandsBrandsLibrariesItemsWorkflowStatuses(BaseModel):
    id: str
    name: str
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class BrandsBrandsLibrariesItemsCustomMetadataProperties(BaseModel):
    id: str
    creator: "BrandsBrandsLibrariesItemsCustomMetadataPropertiesCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandsBrandsLibrariesItemsCustomMetadataPropertiesModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    type: "BrandsBrandsLibrariesItemsCustomMetadataPropertiesType"
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class BrandsBrandsLibrariesItemsCustomMetadataPropertiesCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsLibrariesItemsCustomMetadataPropertiesModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsLibrariesItemsCustomMetadataPropertiesType(BaseModel):
    typename__: Literal[
        "CustomMetadataPropertyType",
        "CustomMetadataPropertyTypeDate",
        "CustomMetadataPropertyTypeLongText",
        "CustomMetadataPropertyTypeMultiSelect",
        "CustomMetadataPropertyTypeNumber",
        "CustomMetadataPropertyTypeSelect",
        "CustomMetadataPropertyTypeText",
        "CustomMetadataPropertyTypeUrl",
    ] = Field(alias="__typename")
    name: str


class BrandsBrandsLibrariesItemsAssetSubmissionRequests(BaseModel):
    id: str
    creator: "BrandsBrandsLibrariesItemsAssetSubmissionRequestsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandsBrandsLibrariesItemsAssetSubmissionRequestsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    project_id: str = Field(alias="projectId")
    title: str
    description: str
    configuration: Optional[Any]


class BrandsBrandsLibrariesItemsAssetSubmissionRequestsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsLibrariesItemsAssetSubmissionRequestsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandsBrandsWorkspaceProjects(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsWorkspaceProjectsItems"]]]


class BrandsBrandsWorkspaceProjectsItems(BaseModel):
    id: str
    name: str
    is_archived: bool = Field(alias="isArchived")


class BrandsBrandsGuidelines(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsGuidelinesItems"]]]


class BrandsBrandsGuidelinesItems(BaseModel):
    id: str
    name: Optional[str]
    url: Any
    default_language: Optional["BrandsBrandsGuidelinesItemsDefaultLanguage"] = Field(
        alias="defaultLanguage"
    )
    translation_languages: List[
        Optional["BrandsBrandsGuidelinesItemsTranslationLanguages"]
    ] = Field(alias="translationLanguages")
    library_pages: "BrandsBrandsGuidelinesItemsLibraryPages" = Field(
        alias="libraryPages"
    )
    pages: Optional["BrandsBrandsGuidelinesItemsPages"]


class BrandsBrandsGuidelinesItemsDefaultLanguage(BaseModel):
    code: LanguageCode
    name: str


class BrandsBrandsGuidelinesItemsTranslationLanguages(BaseModel):
    code: LanguageCode
    name: str


class BrandsBrandsGuidelinesItemsLibraryPages(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsGuidelinesItemsLibraryPagesItems"]]]


class BrandsBrandsGuidelinesItemsLibraryPagesItems(BaseModel):
    id: str
    title: str
    type: LibraryType


class BrandsBrandsGuidelinesItemsPages(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsGuidelinesItemsPagesItems"]]]


class BrandsBrandsGuidelinesItemsPagesItems(BaseModel):
    id: str
    title: str
    url: Any


class BrandsBrandsCustomMetadataProperties(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class BrandsBrandsCreativeTemplates(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: List[Optional["BrandsBrandsCreativeTemplatesItems"]]


class BrandsBrandsCreativeTemplatesItems(BaseModel):
    id: str
    brand_id: str = Field(alias="brandId")
    name: str
    description: Optional[str]
    variable: Optional["BrandsBrandsCreativeTemplatesItemsVariable"]
    variables: List["BrandsBrandsCreativeTemplatesItemsVariables"]
    asset_id: Optional[str] = Field(alias="assetId")


class BrandsBrandsCreativeTemplatesItemsVariable(BaseModel):
    key: str
    name: str
    description: Optional[str]
    type: CreativeTemplateVariableType
    value: Optional[Any]
    connection_count: int = Field(alias="connectionCount")


class BrandsBrandsCreativeTemplatesItemsVariables(BaseModel):
    key: str
    name: str
    description: Optional[str]
    type: CreativeTemplateVariableType
    value: Optional[Any]
    connection_count: int = Field(alias="connectionCount")


Brands.model_rebuild()
BrandsBrands.model_rebuild()
BrandsBrandsSearch.model_rebuild()
BrandsBrandsSearchItemsAudio.model_rebuild()
BrandsBrandsSearchItemsAudioAttachments.model_rebuild()
BrandsBrandsSearchItemsAudioRelatedAssets.model_rebuild()
BrandsBrandsSearchItemsAudioRelatedAssetsItems.model_rebuild()
BrandsBrandsSearchEdges.model_rebuild()
BrandsBrandsSearchEdgesNodeAudio.model_rebuild()
BrandsBrandsSearchEdgesNodeAudioComments.model_rebuild()
BrandsBrandsSearchEdgesNodeAudioCustomMetadata.model_rebuild()
BrandsBrandsSearchEdgesNodeAudioWorkflowTask.model_rebuild()
BrandsBrandsSearchEdgesNodeAudioVariants.model_rebuild()
BrandsBrandsSearchEdgesNodeAudioLocation.model_rebuild()
BrandsBrandsLibraries.model_rebuild()
BrandsBrandsLibrariesItems.model_rebuild()
BrandsBrandsLibrariesItemsAssets.model_rebuild()
BrandsBrandsLibrariesItemsCollections.model_rebuild()
BrandsBrandsLibrariesItemsBrowse.model_rebuild()
BrandsBrandsLibrariesItemsCollaborators.model_rebuild()
BrandsBrandsLibrariesItemsWorkflow.model_rebuild()
BrandsBrandsLibrariesItemsCustomMetadataProperties.model_rebuild()
BrandsBrandsLibrariesItemsAssetSubmissionRequests.model_rebuild()
BrandsBrandsWorkspaceProjects.model_rebuild()
BrandsBrandsGuidelines.model_rebuild()
BrandsBrandsGuidelinesItems.model_rebuild()
BrandsBrandsGuidelinesItemsLibraryPages.model_rebuild()
BrandsBrandsGuidelinesItemsPages.model_rebuild()
BrandsBrandsCreativeTemplates.model_rebuild()
BrandsBrandsCreativeTemplatesItems.model_rebuild()
