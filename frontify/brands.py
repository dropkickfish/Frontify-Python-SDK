# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType


class Brands(BaseModel):
    brands: Optional[List[Optional["BrandsBrands"]]]


class BrandsBrands(BaseModel):
    id: str
    name: str
    rgba_color: Optional["BrandsBrandsRgbaColor"] = Field(alias="rgbaColor")
    avatar: Optional[Any]
    slug: Optional[str]
    libraries: Optional["BrandsBrandsLibraries"]
    workspace_projects: Optional["BrandsBrandsWorkspaceProjects"] = Field(
        alias="workspaceProjects"
    )
    custom_metadata_properties: List["BrandsBrandsCustomMetadataProperties"] = Field(
        alias="customMetadataProperties"
    )


class BrandsBrandsRgbaColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandsBrandsLibraries(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsLibrariesItems"]]]


class BrandsBrandsLibrariesItems(BaseModel):
    typename__: Literal[
        "DocumentLibrary", "IconLibrary", "Library", "LogoLibrary", "MediaLibrary"
    ] = Field(alias="__typename")
    id: str
    name: str
    color: Optional["BrandsBrandsLibrariesItemsColor"]
    assets: "BrandsBrandsLibrariesItemsAssets"
    licenses: Optional[List[Optional["BrandsBrandsLibrariesItemsLicenses"]]]
    collections: "BrandsBrandsLibrariesItemsCollections"
    browse: "BrandsBrandsLibrariesItemsBrowse"
    collaborators: Optional["BrandsBrandsLibrariesItemsCollaborators"]
    current_user_permissions: "BrandsBrandsLibrariesItemsCurrentUserPermissions" = (
        Field(alias="currentUserPermissions")
    )
    custom_metadata_properties: List[
        "BrandsBrandsLibrariesItemsCustomMetadataProperties"
    ] = Field(alias="customMetadataProperties")


class BrandsBrandsLibrariesItemsColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandsBrandsLibrariesItemsAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsLibrariesItemsAssetsItems"]]]


class BrandsBrandsLibrariesItemsAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class BrandsBrandsLibrariesItemsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class BrandsBrandsLibrariesItemsCollections(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsLibrariesItemsCollectionsItems"]]]


class BrandsBrandsLibrariesItemsCollectionsItems(BaseModel):
    id: str
    name: str


class BrandsBrandsLibrariesItemsBrowse(BaseModel):
    folders: "BrandsBrandsLibrariesItemsBrowseFolders"
    assets: "BrandsBrandsLibrariesItemsBrowseAssets"


class BrandsBrandsLibrariesItemsBrowseFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandsBrandsLibrariesItemsBrowseAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandsBrandsLibrariesItemsCollaborators(BaseModel):
    users: "BrandsBrandsLibrariesItemsCollaboratorsUsers"


class BrandsBrandsLibrariesItemsCollaboratorsUsers(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandsBrandsLibrariesItemsCurrentUserPermissions(BaseModel):
    can_create_assets: bool = Field(alias="canCreateAssets")
    can_view_collaborators: bool = Field(alias="canViewCollaborators")
    can_create_collections: bool = Field(alias="canCreateCollections")


class BrandsBrandsLibrariesItemsCustomMetadataProperties(BaseModel):
    id: str
    creator: "BrandsBrandsLibrariesItemsCustomMetadataPropertiesCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandsBrandsLibrariesItemsCustomMetadataPropertiesModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    type: "BrandsBrandsLibrariesItemsCustomMetadataPropertiesType"
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class BrandsBrandsLibrariesItemsCustomMetadataPropertiesCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class BrandsBrandsLibrariesItemsCustomMetadataPropertiesModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class BrandsBrandsLibrariesItemsCustomMetadataPropertiesType(BaseModel):
    typename__: Literal[
        "CustomMetadataPropertyType",
        "CustomMetadataPropertyTypeDate",
        "CustomMetadataPropertyTypeLongText",
        "CustomMetadataPropertyTypeMultiSelect",
        "CustomMetadataPropertyTypeNumber",
        "CustomMetadataPropertyTypeSelect",
        "CustomMetadataPropertyTypeText",
        "CustomMetadataPropertyTypeUrl",
    ] = Field(alias="__typename")
    name: str


class BrandsBrandsWorkspaceProjects(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandsBrandsWorkspaceProjectsItems"]]]


class BrandsBrandsWorkspaceProjectsItems(BaseModel):
    id: str
    name: str
    custom_metadata: List["BrandsBrandsWorkspaceProjectsItemsCustomMetadata"] = Field(
        alias="customMetadata"
    )


class BrandsBrandsWorkspaceProjectsItemsCustomMetadata(BaseModel):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "BrandsBrandsWorkspaceProjectsItemsCustomMetadataProperty"


class BrandsBrandsWorkspaceProjectsItemsCustomMetadataProperty(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class BrandsBrandsCustomMetadataProperties(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


Brands.model_rebuild()
BrandsBrands.model_rebuild()
BrandsBrandsLibraries.model_rebuild()
BrandsBrandsLibrariesItems.model_rebuild()
BrandsBrandsLibrariesItemsAssets.model_rebuild()
BrandsBrandsLibrariesItemsCollections.model_rebuild()
BrandsBrandsLibrariesItemsBrowse.model_rebuild()
BrandsBrandsLibrariesItemsCollaborators.model_rebuild()
BrandsBrandsLibrariesItemsCustomMetadataProperties.model_rebuild()
BrandsBrandsWorkspaceProjects.model_rebuild()
BrandsBrandsWorkspaceProjectsItems.model_rebuild()
BrandsBrandsWorkspaceProjectsItemsCustomMetadata.model_rebuild()
