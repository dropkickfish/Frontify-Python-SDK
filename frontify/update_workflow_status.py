# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType, WorkflowStatusEnterRule


class UpdateWorkflowStatus(BaseModel):
    update_workflow_status: Optional["UpdateWorkflowStatusUpdateWorkflowStatus"] = (
        Field(alias="updateWorkflowStatus")
    )


class UpdateWorkflowStatusUpdateWorkflowStatus(BaseModel):
    workflow_status: Optional[
        "UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatus"
    ] = Field(alias="workflowStatus")


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatus(BaseModel):
    id: str
    name: str
    color: "UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusColor"
    assigned_users: List[
        Optional["UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusAssignedUsers"]
    ] = Field(alias="assignedUsers")
    checklist_presets: List[
        Optional[
            "UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusChecklistPresets"
        ]
    ] = Field(alias="checklistPresets")
    tasks: "UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasks"
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusChecklistPresets(BaseModel):
    id: str
    content: str
    assigned_user: Optional[
        "UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusChecklistPresetsAssignedUser"
    ] = Field(alias="assignedUser")


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusChecklistPresetsAssignedUser(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasks(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional["UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItems"]
        ]
    ]


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItems(BaseModel):
    id: str
    assigned_users: List[
        Optional[
            "UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItemsAssignedUsers"
        ]
    ] = Field(alias="assignedUsers")
    asset: Optional[
        "UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItemsAsset"
    ]
    title: Optional[str]
    description: Optional[str]
    status: "UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItemsStatus"
    checklist_item: (
        "UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItemsChecklistItem"
    ) = Field(alias="checklistItem")


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItemsAssignedUsers(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItemsAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItemsStatus(BaseModel):
    id: str
    name: str
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItemsChecklistItem(
    BaseModel
):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


UpdateWorkflowStatus.model_rebuild()
UpdateWorkflowStatusUpdateWorkflowStatus.model_rebuild()
UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatus.model_rebuild()
UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusChecklistPresets.model_rebuild()
UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasks.model_rebuild()
UpdateWorkflowStatusUpdateWorkflowStatusWorkflowStatusTasksItems.model_rebuild()
