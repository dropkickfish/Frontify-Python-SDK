# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel


class Account(BaseModel):
    account: "AccountAccount"


class AccountAccount(BaseModel):
    id: str
    users: Optional["AccountAccountUsers"]
    user_groups: Optional["AccountAccountUserGroups"] = Field(alias="userGroups")


class AccountAccountUsers(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["AccountAccountUsersItems"]]]


class AccountAccountUsersItems(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class AccountAccountUserGroups(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["AccountAccountUserGroupsItems"]]]


class AccountAccountUserGroupsItems(BaseModel):
    id: str
    name: Optional[str]
    users: Optional["AccountAccountUserGroupsItemsUsers"]


class AccountAccountUserGroupsItemsUsers(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


Account.model_rebuild()
AccountAccount.model_rebuild()
AccountAccountUsers.model_rebuild()
AccountAccountUserGroups.model_rebuild()
AccountAccountUserGroupsItems.model_rebuild()
