# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, Dict, List, Optional, Union

from .account import Account
from .add_asset_license import AddAssetLicense
from .add_asset_preview_image import AddAssetPreviewImage
from .add_asset_relations import AddAssetRelations
from .add_asset_tags import AddAssetTags
from .add_collection_assets import AddCollectionAssets
from .add_custom_metadata import AddCustomMetadata
from .add_custom_metadata_property_options import AddCustomMetadataPropertyOptions
from .asset import Asset
from .assets import Assets
from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .brand import Brand
from .brands import Brands
from .client_tracking_id import ClientTrackingId
from .create_asset import CreateAsset
from .create_asset_comment import CreateAssetComment
from .create_attachment import CreateAttachment
from .create_collection import CreateCollection
from .create_custom_metadata_property import CreateCustomMetadataProperty
from .create_external_asset import CreateExternalAsset
from .create_folder import CreateFolder
from .create_license import CreateLicense
from .create_workspace_project import CreateWorkspaceProject
from .current_user import CurrentUser
from .delete_asset import DeleteAsset
from .delete_attachment import DeleteAttachment
from .delete_collection import DeleteCollection
from .delete_comment import DeleteComment
from .delete_custom_metadata_property import DeleteCustomMetadataProperty
from .delete_folders import DeleteFolders
from .delete_license import DeleteLicense
from .edit_comment import EditComment
from .input_types import (
    AddAssetLicenseInput,
    AddAssetPreviewImageInput,
    AddAssetRelationsInput,
    AddAssetTagsInput,
    AddCollectionAssetsInput,
    AddCustomMetadataInput,
    AddCustomMetadataPropertyOptionsInput,
    AssetCommentQueryInput,
    AssetQueryInput,
    CreateAssetCommentInput,
    CreateAssetInput,
    CreateAttachmentInput,
    CreateCollectionInput,
    CreateCustomMetadataPropertyInput,
    CreateExternalAssetInput,
    CreateFolderInput,
    CreateLicenseInput,
    CreateWorkspaceProjectInput,
    DeleteAssetInput,
    DeleteAttachmentInput,
    DeleteCollectionInput,
    DeleteCommentInput,
    DeleteCustomMetadataPropertyInput,
    DeleteFoldersInput,
    DeleteLicenseInput,
    EditCommentInput,
    InstallProjectWebhookInput,
    InviteProjectUserInput,
    MoveAssetsInput,
    MoveFoldersInput,
    RemoveAssetLicenseInput,
    RemoveAssetPreviewImageInput,
    RemoveAssetTagsInput,
    RemoveCollectionAssetsInput,
    RemoveCustomMetadataInput,
    RemoveCustomMetadataPropertyOptionsInput,
    ReopenAssetCommentInput,
    ReplaceAssetInput,
    ReplyToCommentInput,
    ResolveAssetCommentInput,
    SetCollectionAssetsInput,
    SyncAssetTagsInput,
    UninstallWebhookInput,
    UpdateAssetInput,
    UpdateCollectionInput,
    UpdateCustomMetadataPropertyInput,
    UpdateFolderInput,
    UploadFileInput,
)
from .install_project_webhook import InstallProjectWebhook
from .invite_project_user import InviteProjectUser
from .library import Library
from .move_assets import MoveAssets
from .move_folders import MoveFolders
from .node import Node
from .remove_asset_license import RemoveAssetLicense
from .remove_asset_preview_image import RemoveAssetPreviewImage
from .remove_asset_tags import RemoveAssetTags
from .remove_collection_assets import RemoveCollectionAssets
from .remove_custom_metadata import RemoveCustomMetadata
from .remove_custom_metadata_property_options import RemoveCustomMetadataPropertyOptions
from .reopen_asset_comment import ReopenAssetComment
from .replace_asset import ReplaceAsset
from .reply_to_comment import ReplyToComment
from .resolve_asset_comment import ResolveAssetComment
from .set_collection_assets import SetCollectionAssets
from .sync_asset_tags import SyncAssetTags
from .uninstall_webhook import UninstallWebhook
from .update_asset import UpdateAsset
from .update_collection import UpdateCollection
from .update_custom_metadata_property import UpdateCustomMetadataProperty
from .update_folder import UpdateFolder
from .upload_file import UploadFile
from .webhooks import Webhooks
from .workspace_project import WorkspaceProject


def gql(q: str) -> str:
    return q


class AsyncFrontifyClient(AsyncBaseClient):
    async def add_asset_license(
        self,
        input: AddAssetLicenseInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AddAssetLicense:
        _query = gql(
            """
            mutation addAssetLicense($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query1: AssetCommentQueryInput, $input: AddAssetLicenseInput!) {
              addAssetLicense(input: $input) {
                asset {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  title
                  description
                  attachments {
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    name
                    filename
                    type
                    externalId
                    extension
                    size
                    downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                  }
                  externalId
                  tags {
                    value
                    source
                  }
                  copyright {
                    status
                    notice
                  }
                  expiresAt
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  status
                  relatedAssets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  comments(limit: $limit4, page: $page4, query: $query1) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      createdAt
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      isResolved
                      replies(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canDownload
                    canComment
                  }
                  customMetadata {
                    __typename
                    property {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                  location {
                    brand {
                      id
                      name
                    }
                    library {
                      id
                      name
                    }
                    workspaceProject {
                      id
                      name
                    }
                    folder {
                      id
                      name
                      breadcrumbs {
                        id
                        name
                      }
                    }
                  }
                }
                license {
                  id
                  title
                  license
                  addByDefault
                  requireConsensus
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query1": query_1,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="addAssetLicense",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddAssetLicense.model_validate(data)

    async def add_asset_preview_image(
        self, input: AddAssetPreviewImageInput, **kwargs: Any
    ) -> AddAssetPreviewImage:
        query = gql(
            """
            mutation addAssetPreviewImage($input: AddAssetPreviewImageInput!) {
              addAssetPreviewImage(input: $input) {
                job {
                  assetId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="addAssetPreviewImage",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddAssetPreviewImage.model_validate(data)

    async def add_asset_relations(
        self,
        input: AddAssetRelationsInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        validity_in_days_2: Union[Optional[int], UnsetType] = UNSET,
        permanent_2: Union[Optional[bool], UnsetType] = UNSET,
        limit_5: Union[Optional[int], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        limit_6: Union[Optional[int], UnsetType] = UNSET,
        page_6: Union[Optional[int], UnsetType] = UNSET,
        query_2: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AddAssetRelations:
        _query = gql(
            """
            mutation addAssetRelations($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query1: AssetCommentQueryInput, $validityInDays2: Int, $permanent2: Boolean, $limit5: Int, $page5: Int, $limit6: Int, $page6: Int, $query2: AssetCommentQueryInput, $input: AddAssetRelationsInput!) {
              addAssetRelations(input: $input) {
                asset {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  title
                  description
                  attachments {
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    name
                    filename
                    type
                    externalId
                    extension
                    size
                    downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                  }
                  externalId
                  tags {
                    value
                    source
                  }
                  copyright {
                    status
                    notice
                  }
                  expiresAt
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  status
                  relatedAssets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  comments(limit: $limit4, page: $page4, query: $query1) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      createdAt
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      isResolved
                      replies(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canDownload
                    canComment
                  }
                  customMetadata {
                    __typename
                    property {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                  location {
                    brand {
                      id
                      name
                    }
                    library {
                      id
                      name
                    }
                    workspaceProject {
                      id
                      name
                    }
                    folder {
                      id
                      name
                      breadcrumbs {
                        id
                        name
                      }
                    }
                  }
                }
                relatedAssets {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  title
                  description
                  attachments {
                    id
                    createdAt
                    modifiedAt
                    name
                    filename
                    type
                    externalId
                    extension
                    size
                    downloadUrl(validityInDays: $validityInDays2, permanent: $permanent2)
                  }
                  externalId
                  tags {
                    value
                    source
                  }
                  copyright {
                    status
                    notice
                  }
                  expiresAt
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  status
                  relatedAssets(limit: $limit5, page: $page5) {
                    total
                    page
                    limit
                    hasNextPage
                  }
                  comments(limit: $limit6, page: $page6, query: $query2) {
                    total
                    page
                    limit
                    hasNextPage
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canDownload
                    canComment
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query1": query_1,
            "validityInDays2": validity_in_days_2,
            "permanent2": permanent_2,
            "limit5": limit_5,
            "page5": page_5,
            "limit6": limit_6,
            "page6": page_6,
            "query2": query_2,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="addAssetRelations",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddAssetRelations.model_validate(data)

    async def add_asset_tags(
        self,
        input: AddAssetTagsInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AddAssetTags:
        _query = gql(
            """
            mutation addAssetTags($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query1: AssetCommentQueryInput, $input: AddAssetTagsInput!) {
              addAssetTags(input: $input) {
                asset {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  title
                  description
                  attachments {
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    name
                    filename
                    type
                    externalId
                    extension
                    size
                    downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                  }
                  externalId
                  tags {
                    value
                    source
                  }
                  copyright {
                    status
                    notice
                  }
                  expiresAt
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  status
                  relatedAssets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  comments(limit: $limit4, page: $page4, query: $query1) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      createdAt
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      isResolved
                      replies(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canDownload
                    canComment
                  }
                  customMetadata {
                    __typename
                    property {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                  location {
                    brand {
                      id
                      name
                    }
                    library {
                      id
                      name
                    }
                    workspaceProject {
                      id
                      name
                    }
                    folder {
                      id
                      name
                      breadcrumbs {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query1": query_1,
            "input": input,
        }
        response = await self.execute(
            query=_query, operation_name="addAssetTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AddAssetTags.model_validate(data)

    async def add_collection_assets(
        self,
        input: AddCollectionAssetsInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> AddCollectionAssets:
        _query = gql(
            """
            mutation addCollectionAssets($validityInDays: Int, $permanent: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $input: AddCollectionAssetsInput!) {
              addCollectionAssets(input: $input) {
                collection {
                  id
                  name
                  assets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  currentUserPermissions {
                    canAddAssets
                    canRemoveAssets
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="addCollectionAssets",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddCollectionAssets.model_validate(data)

    async def add_custom_metadata(
        self, input: AddCustomMetadataInput, **kwargs: Any
    ) -> AddCustomMetadata:
        query = gql(
            """
            mutation addCustomMetadata($input: AddCustomMetadataInput!) {
              addCustomMetadata(input: $input) {
                parentIds
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="addCustomMetadata",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddCustomMetadata.model_validate(data)

    async def add_custom_metadata_property_options(
        self, input: AddCustomMetadataPropertyOptionsInput, **kwargs: Any
    ) -> AddCustomMetadataPropertyOptions:
        query = gql(
            """
            mutation addCustomMetadataPropertyOptions($input: AddCustomMetadataPropertyOptionsInput!) {
              addCustomMetadataPropertyOptions(input: $input) {
                customMetadataProperty {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  name
                  type {
                    __typename
                    name
                  }
                  helpText
                  isRequired
                  defaultValue
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="addCustomMetadataPropertyOptions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddCustomMetadataPropertyOptions.model_validate(data)

    async def create_asset(self, input: CreateAssetInput, **kwargs: Any) -> CreateAsset:
        query = gql(
            """
            mutation createAsset($input: CreateAssetInput!) {
              createAsset(input: $input) {
                job {
                  assetId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="createAsset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateAsset.model_validate(data)

    async def create_asset_comment(
        self,
        input: CreateAssetCommentInput,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateAssetComment:
        query = gql(
            """
            mutation createAssetComment($limit: Int, $page: Int, $input: CreateAssetCommentInput!) {
              createAssetComment(input: $input) {
                comment {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  content
                  mentionedUsers {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  isResolved
                  replies(limit: $limit, page: $page) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                    }
                  }
                  marking {
                    __typename
                    position {
                      x
                      y
                    }
                    dimensions {
                      width
                      height
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canReply
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "page": page, "input": input}
        response = await self.execute(
            query=query,
            operation_name="createAssetComment",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAssetComment.model_validate(data)

    async def create_attachment(
        self, input: CreateAttachmentInput, **kwargs: Any
    ) -> CreateAttachment:
        query = gql(
            """
            mutation createAttachment($input: CreateAttachmentInput!) {
              createAttachment(input: $input) {
                job {
                  attachmentId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="createAttachment",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAttachment.model_validate(data)

    async def create_collection(
        self,
        input: CreateCollectionInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateCollection:
        _query = gql(
            """
            mutation createCollection($validityInDays: Int, $permanent: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $input: CreateCollectionInput!) {
              createCollection(input: $input) {
                collection {
                  id
                  name
                  assets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  currentUserPermissions {
                    canAddAssets
                    canRemoveAssets
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="createCollection",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateCollection.model_validate(data)

    async def create_custom_metadata_property(
        self, input: CreateCustomMetadataPropertyInput, **kwargs: Any
    ) -> CreateCustomMetadataProperty:
        query = gql(
            """
            mutation createCustomMetadataProperty($input: CreateCustomMetadataPropertyInput!) {
              createCustomMetadataProperty(input: $input) {
                property {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  name
                  type {
                    __typename
                    name
                  }
                  helpText
                  isRequired
                  defaultValue
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="createCustomMetadataProperty",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateCustomMetadataProperty.model_validate(data)

    async def create_external_asset(
        self, input: CreateExternalAssetInput, **kwargs: Any
    ) -> CreateExternalAsset:
        query = gql(
            """
            mutation createExternalAsset($input: CreateExternalAssetInput!) {
              createExternalAsset(input: $input) {
                job {
                  assetId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="createExternalAsset",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateExternalAsset.model_validate(data)

    async def create_folder(
        self,
        input: CreateFolderInput,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_5: Union[Optional[int], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateFolder:
        _query = gql(
            """
            mutation createFolder($limit: Int, $page: Int, $limit1: Int, $page1: Int, $limit2: Int, $page2: Int, $validityInDays: Int, $permanent: Boolean, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query: AssetCommentQueryInput, $limit5: Int, $page5: Int, $input: CreateFolderInput!) {
              createFolder(input: $input) {
                folder {
                  __typename
                  id
                  name
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  breadcrumbs {
                    id
                    name
                  }
                  folders(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      name
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      breadcrumbs {
                        id
                        name
                      }
                      folders(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      assets(limit: $limit1, page: $page1) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  assets(limit: $limit5, page: $page5) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      createdAt
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit4, page: $page4, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "limit2": limit_2,
            "page2": page_2,
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query": query,
            "limit5": limit_5,
            "page5": page_5,
            "input": input,
        }
        response = await self.execute(
            query=_query, operation_name="createFolder", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateFolder.model_validate(data)

    async def create_license(
        self, input: CreateLicenseInput, **kwargs: Any
    ) -> CreateLicense:
        query = gql(
            """
            mutation createLicense($input: CreateLicenseInput!) {
              createLicense(input: $input) {
                license {
                  id
                  title
                  license
                  addByDefault
                  requireConsensus
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="createLicense", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateLicense.model_validate(data)

    async def create_workspace_project(
        self,
        input: CreateWorkspaceProjectInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetQueryInput], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        limit_5: Union[Optional[int], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateWorkspaceProject:
        _query = gql(
            """
            mutation createWorkspaceProject($validityInDays: Int, $permanent: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $query1: AssetQueryInput, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $limit5: Int, $page5: Int, $input: CreateWorkspaceProjectInput!) {
              createWorkspaceProject(input: $input) {
                project {
                  id
                  name
                  color {
                    red
                    green
                    blue
                    alpha
                  }
                  assets(limit: $limit2, page: $page2, query: $query1) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  browse {
                    folders(limit: $limit3, page: $page3) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        __typename
                        id
                        name
                        createdAt
                        modifiedAt
                      }
                    }
                    assets(limit: $limit4, page: $page4) {
                      total
                      page
                      limit
                      hasNextPage
                    }
                  }
                  collaborators {
                    users(limit: $limit5, page: $page5) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                    }
                  }
                  currentUserPermissions {
                    canCreateAssets
                    canViewCollaborators
                  }
                  customMetadata {
                    __typename
                    property {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "query1": query_1,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "limit5": limit_5,
            "page5": page_5,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="createWorkspaceProject",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateWorkspaceProject.model_validate(data)

    async def delete_asset(self, input: DeleteAssetInput, **kwargs: Any) -> DeleteAsset:
        query = gql(
            """
            mutation deleteAsset($input: DeleteAssetInput!) {
              deleteAsset(input: $input) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="deleteAsset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteAsset.model_validate(data)

    async def delete_attachment(
        self, input: DeleteAttachmentInput, **kwargs: Any
    ) -> DeleteAttachment:
        query = gql(
            """
            mutation deleteAttachment($input: DeleteAttachmentInput!) {
              deleteAttachment(input: $input) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="deleteAttachment",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteAttachment.model_validate(data)

    async def delete_collection(
        self, input: DeleteCollectionInput, **kwargs: Any
    ) -> DeleteCollection:
        query = gql(
            """
            mutation deleteCollection($input: DeleteCollectionInput!) {
              deleteCollection(input: $input) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="deleteCollection",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteCollection.model_validate(data)

    async def delete_comment(
        self, input: DeleteCommentInput, **kwargs: Any
    ) -> DeleteComment:
        query = gql(
            """
            mutation deleteComment($input: DeleteCommentInput!) {
              deleteComment(input: $input) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="deleteComment", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteComment.model_validate(data)

    async def delete_custom_metadata_property(
        self, input: DeleteCustomMetadataPropertyInput, **kwargs: Any
    ) -> DeleteCustomMetadataProperty:
        query = gql(
            """
            mutation deleteCustomMetadataProperty($input: DeleteCustomMetadataPropertyInput!) {
              deleteCustomMetadataProperty(input: $input) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="deleteCustomMetadataProperty",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteCustomMetadataProperty.model_validate(data)

    async def delete_folders(
        self, input: DeleteFoldersInput, **kwargs: Any
    ) -> DeleteFolders:
        query = gql(
            """
            mutation deleteFolders($input: DeleteFoldersInput!) {
              deleteFolders(input: $input) {
                ids
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="deleteFolders", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteFolders.model_validate(data)

    async def delete_license(
        self, input: DeleteLicenseInput, **kwargs: Any
    ) -> DeleteLicense:
        query = gql(
            """
            mutation deleteLicense($input: DeleteLicenseInput!) {
              deleteLicense(input: $input) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="deleteLicense", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteLicense.model_validate(data)

    async def edit_comment(self, input: EditCommentInput, **kwargs: Any) -> EditComment:
        query = gql(
            """
            mutation editComment($input: EditCommentInput!) {
              editComment(input: $input) {
                comment {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  content
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="editComment", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return EditComment.model_validate(data)

    async def install_project_webhook(
        self, input: InstallProjectWebhookInput, **kwargs: Any
    ) -> InstallProjectWebhook:
        query = gql(
            """
            mutation installProjectWebhook($input: InstallProjectWebhookInput!) {
              installProjectWebhook(input: $input) {
                webhook {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  name
                  notificationUrl
                  secret
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="installProjectWebhook",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InstallProjectWebhook.model_validate(data)

    async def invite_project_user(
        self,
        input: InviteProjectUserInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetQueryInput], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        limit_5: Union[Optional[int], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        limit_6: Union[Optional[int], UnsetType] = UNSET,
        page_6: Union[Optional[int], UnsetType] = UNSET,
        limit_7: Union[Optional[int], UnsetType] = UNSET,
        page_7: Union[Optional[int], UnsetType] = UNSET,
        limit_8: Union[Optional[int], UnsetType] = UNSET,
        page_8: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> InviteProjectUser:
        _query = gql(
            """
            mutation inviteProjectUser($validityInDays: Int, $permanent: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $query1: AssetQueryInput, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $limit5: Int, $page5: Int, $limit6: Int, $page6: Int, $limit7: Int, $page7: Int, $limit8: Int, $page8: Int, $input: InviteProjectUserInput!) {
              inviteProjectUser(input: $input) {
                project {
                  __typename
                  ... on MediaLibrary {
                    id
                    name
                    color {
                      red
                      green
                      blue
                      alpha
                    }
                    assetCount
                    assets(limit: $limit2, page: $page2, query: $query1) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        __typename
                        id
                        creator {
                          __typename
                          id
                          email
                          name
                          avatar
                        }
                        createdAt
                        modifier {
                          __typename
                          id
                          email
                          name
                          avatar
                        }
                        modifiedAt
                        title
                        description
                        attachments {
                          id
                          creator {
                            __typename
                            id
                            email
                            name
                            avatar
                          }
                          createdAt
                          modifier {
                            __typename
                            id
                            email
                            name
                            avatar
                          }
                          modifiedAt
                          name
                          filename
                          type
                          externalId
                          extension
                          size
                          downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                        }
                        externalId
                        tags {
                          value
                          source
                        }
                        copyright {
                          status
                          notice
                        }
                        expiresAt
                        licenses {
                          id
                          title
                          license
                          addByDefault
                          requireConsensus
                        }
                        status
                        relatedAssets(limit: $limit, page: $page) {
                          total
                          page
                          limit
                          hasNextPage
                          items {
                            __typename
                            id
                            createdAt
                            modifiedAt
                            title
                            description
                            externalId
                            expiresAt
                            status
                          }
                        }
                        comments(limit: $limit1, page: $page1, query: $query) {
                          total
                          page
                          limit
                          hasNextPage
                          items {
                            id
                            createdAt
                            modifiedAt
                            content
                            isResolved
                          }
                        }
                        currentUserPermissions {
                          canEdit
                          canDelete
                          canDownload
                          canComment
                        }
                        customMetadata {
                          __typename
                          property {
                            id
                            createdAt
                            modifiedAt
                            name
                            helpText
                            isRequired
                            defaultValue
                          }
                        }
                        location {
                          brand {
                            id
                            name
                          }
                          library {
                            id
                            name
                          }
                          workspaceProject {
                            id
                            name
                          }
                          folder {
                            id
                            name
                          }
                        }
                      }
                    }
                    licenses {
                      id
                      title
                      license
                      addByDefault
                      requireConsensus
                    }
                    browse {
                      folders(limit: $limit5, page: $page5) {
                        total
                        page
                        limit
                        hasNextPage
                        items {
                          __typename
                          id
                          name
                          createdAt
                          modifiedAt
                          breadcrumbs {
                            id
                            name
                          }
                          folders(limit: $limit3, page: $page3) {
                            total
                            page
                            limit
                            hasNextPage
                          }
                          assets(limit: $limit4, page: $page4) {
                            total
                            page
                            limit
                            hasNextPage
                          }
                        }
                      }
                      assets(limit: $limit6, page: $page6) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                    collaborators {
                      users(limit: $limit7, page: $page7) {
                        total
                        page
                        limit
                        hasNextPage
                        items {
                          __typename
                          id
                          email
                          name
                          avatar
                        }
                      }
                    }
                    currentUserPermissions {
                      canCreateAssets
                      canViewCollaborators
                      canCreateCollections
                    }
                    customMetadataProperties {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                    collections(limit: $limit8, page: $page8) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        id
                        name
                      }
                    }
                  }
                  ... on IconLibrary {
                    id
                    name
                    assetCount
                  }
                  ... on LogoLibrary {
                    id
                    name
                    assetCount
                  }
                  ... on DocumentLibrary {
                    id
                    name
                    assetCount
                  }
                  ... on Workspace {
                    id
                    name
                    assetCount
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "query1": query_1,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "limit5": limit_5,
            "page5": page_5,
            "limit6": limit_6,
            "page6": page_6,
            "limit7": limit_7,
            "page7": page_7,
            "limit8": limit_8,
            "page8": page_8,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="inviteProjectUser",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InviteProjectUser.model_validate(data)

    async def move_assets(
        self,
        input: MoveAssetsInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> MoveAssets:
        _query = gql(
            """
            mutation moveAssets($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query1: AssetCommentQueryInput, $input: MoveAssetsInput!) {
              moveAssets(input: $input) {
                assets {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  title
                  description
                  attachments {
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    name
                    filename
                    type
                    externalId
                    extension
                    size
                    downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                  }
                  externalId
                  tags {
                    value
                    source
                  }
                  copyright {
                    status
                    notice
                  }
                  expiresAt
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  status
                  relatedAssets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  comments(limit: $limit4, page: $page4, query: $query1) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      createdAt
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      isResolved
                      replies(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canDownload
                    canComment
                  }
                  customMetadata {
                    __typename
                    property {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                  location {
                    brand {
                      id
                      name
                    }
                    library {
                      id
                      name
                    }
                    workspaceProject {
                      id
                      name
                    }
                    folder {
                      id
                      name
                      breadcrumbs {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query1": query_1,
            "input": input,
        }
        response = await self.execute(
            query=_query, operation_name="moveAssets", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return MoveAssets.model_validate(data)

    async def move_folders(self, input: MoveFoldersInput, **kwargs: Any) -> MoveFolders:
        query = gql(
            """
            mutation moveFolders($input: MoveFoldersInput!) {
              moveFolders(input: $input) {
                ids
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="moveFolders", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return MoveFolders.model_validate(data)

    async def remove_asset_license(
        self,
        input: RemoveAssetLicenseInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> RemoveAssetLicense:
        _query = gql(
            """
            mutation removeAssetLicense($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query1: AssetCommentQueryInput, $input: RemoveAssetLicenseInput!) {
              removeAssetLicense(input: $input) {
                asset {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  title
                  description
                  attachments {
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    name
                    filename
                    type
                    externalId
                    extension
                    size
                    downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                  }
                  externalId
                  tags {
                    value
                    source
                  }
                  copyright {
                    status
                    notice
                  }
                  expiresAt
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  status
                  relatedAssets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  comments(limit: $limit4, page: $page4, query: $query1) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      createdAt
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      isResolved
                      replies(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canDownload
                    canComment
                  }
                  customMetadata {
                    __typename
                    property {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                  location {
                    brand {
                      id
                      name
                    }
                    library {
                      id
                      name
                    }
                    workspaceProject {
                      id
                      name
                    }
                    folder {
                      id
                      name
                      breadcrumbs {
                        id
                        name
                      }
                    }
                  }
                }
                license {
                  id
                  title
                  license
                  addByDefault
                  requireConsensus
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query1": query_1,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="removeAssetLicense",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveAssetLicense.model_validate(data)

    async def remove_asset_preview_image(
        self,
        input: RemoveAssetPreviewImageInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> RemoveAssetPreviewImage:
        _query = gql(
            """
            mutation removeAssetPreviewImage($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query1: AssetCommentQueryInput, $input: RemoveAssetPreviewImageInput!) {
              removeAssetPreviewImage(input: $input) {
                asset {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  title
                  description
                  attachments {
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    name
                    filename
                    type
                    externalId
                    extension
                    size
                    downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                  }
                  externalId
                  tags {
                    value
                    source
                  }
                  copyright {
                    status
                    notice
                  }
                  expiresAt
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  status
                  relatedAssets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  comments(limit: $limit4, page: $page4, query: $query1) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      createdAt
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      isResolved
                      replies(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canDownload
                    canComment
                  }
                  customMetadata {
                    __typename
                    property {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                  location {
                    brand {
                      id
                      name
                    }
                    library {
                      id
                      name
                    }
                    workspaceProject {
                      id
                      name
                    }
                    folder {
                      id
                      name
                      breadcrumbs {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query1": query_1,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="removeAssetPreviewImage",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveAssetPreviewImage.model_validate(data)

    async def remove_asset_tags(
        self,
        input: RemoveAssetTagsInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> RemoveAssetTags:
        _query = gql(
            """
            mutation removeAssetTags($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query1: AssetCommentQueryInput, $input: RemoveAssetTagsInput!) {
              removeAssetTags(input: $input) {
                asset {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  title
                  description
                  attachments {
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    name
                    filename
                    type
                    externalId
                    extension
                    size
                    downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                  }
                  externalId
                  tags {
                    value
                    source
                  }
                  copyright {
                    status
                    notice
                  }
                  expiresAt
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  status
                  relatedAssets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  comments(limit: $limit4, page: $page4, query: $query1) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      createdAt
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      isResolved
                      replies(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canDownload
                    canComment
                  }
                  customMetadata {
                    __typename
                    property {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                  location {
                    brand {
                      id
                      name
                    }
                    library {
                      id
                      name
                    }
                    workspaceProject {
                      id
                      name
                    }
                    folder {
                      id
                      name
                      breadcrumbs {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query1": query_1,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="removeAssetTags",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveAssetTags.model_validate(data)

    async def remove_collection_assets(
        self,
        input: RemoveCollectionAssetsInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> RemoveCollectionAssets:
        _query = gql(
            """
            mutation removeCollectionAssets($validityInDays: Int, $permanent: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $input: RemoveCollectionAssetsInput!) {
              removeCollectionAssets(input: $input) {
                collection {
                  id
                  name
                  assets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  currentUserPermissions {
                    canAddAssets
                    canRemoveAssets
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="removeCollectionAssets",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveCollectionAssets.model_validate(data)

    async def remove_custom_metadata(
        self, input: RemoveCustomMetadataInput, **kwargs: Any
    ) -> RemoveCustomMetadata:
        query = gql(
            """
            mutation removeCustomMetadata($input: RemoveCustomMetadataInput!) {
              removeCustomMetadata(input: $input) {
                parentIds
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="removeCustomMetadata",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveCustomMetadata.model_validate(data)

    async def remove_custom_metadata_property_options(
        self, input: RemoveCustomMetadataPropertyOptionsInput, **kwargs: Any
    ) -> RemoveCustomMetadataPropertyOptions:
        query = gql(
            """
            mutation removeCustomMetadataPropertyOptions($input: RemoveCustomMetadataPropertyOptionsInput!) {
              removeCustomMetadataPropertyOptions(input: $input) {
                customMetadataProperty {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  name
                  type {
                    __typename
                    name
                  }
                  helpText
                  isRequired
                  defaultValue
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="removeCustomMetadataPropertyOptions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveCustomMetadataPropertyOptions.model_validate(data)

    async def reopen_asset_comment(
        self,
        input: ReopenAssetCommentInput,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> ReopenAssetComment:
        query = gql(
            """
            mutation reopenAssetComment($limit: Int, $page: Int, $input: ReopenAssetCommentInput!) {
              reopenAssetComment(input: $input) {
                comment {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  content
                  mentionedUsers {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  isResolved
                  replies(limit: $limit, page: $page) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                    }
                  }
                  marking {
                    __typename
                    position {
                      x
                      y
                    }
                    dimensions {
                      width
                      height
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canReply
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "page": page, "input": input}
        response = await self.execute(
            query=query,
            operation_name="reopenAssetComment",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ReopenAssetComment.model_validate(data)

    async def replace_asset(
        self, input: ReplaceAssetInput, **kwargs: Any
    ) -> ReplaceAsset:
        query = gql(
            """
            mutation replaceAsset($input: ReplaceAssetInput!) {
              replaceAsset(input: $input) {
                job {
                  assetId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="replaceAsset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ReplaceAsset.model_validate(data)

    async def reply_to_comment(
        self, input: ReplyToCommentInput, **kwargs: Any
    ) -> ReplyToComment:
        query = gql(
            """
            mutation replyToComment($input: ReplyToCommentInput!) {
              replyToComment(input: $input) {
                reply {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  content
                  mentionedUsers {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="replyToComment", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ReplyToComment.model_validate(data)

    async def resolve_asset_comment(
        self,
        input: ResolveAssetCommentInput,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> ResolveAssetComment:
        query = gql(
            """
            mutation resolveAssetComment($limit: Int, $page: Int, $input: ResolveAssetCommentInput!) {
              resolveAssetComment(input: $input) {
                comment {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  content
                  mentionedUsers {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  isResolved
                  replies(limit: $limit, page: $page) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                    }
                  }
                  marking {
                    __typename
                    position {
                      x
                      y
                    }
                    dimensions {
                      width
                      height
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canReply
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "page": page, "input": input}
        response = await self.execute(
            query=query,
            operation_name="resolveAssetComment",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ResolveAssetComment.model_validate(data)

    async def set_collection_assets(
        self,
        input: SetCollectionAssetsInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SetCollectionAssets:
        _query = gql(
            """
            mutation setCollectionAssets($validityInDays: Int, $permanent: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $input: SetCollectionAssetsInput!) {
              setCollectionAssets(input: $input) {
                collection {
                  id
                  name
                  assets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  currentUserPermissions {
                    canAddAssets
                    canRemoveAssets
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="setCollectionAssets",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SetCollectionAssets.model_validate(data)

    async def sync_asset_tags(
        self,
        input: SyncAssetTagsInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SyncAssetTags:
        _query = gql(
            """
            mutation syncAssetTags($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query1: AssetCommentQueryInput, $input: SyncAssetTagsInput!) {
              syncAssetTags(input: $input) {
                asset {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  title
                  description
                  attachments {
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    name
                    filename
                    type
                    externalId
                    extension
                    size
                    downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                  }
                  externalId
                  tags {
                    value
                    source
                  }
                  copyright {
                    status
                    notice
                  }
                  expiresAt
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  status
                  relatedAssets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  comments(limit: $limit4, page: $page4, query: $query1) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      createdAt
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      isResolved
                      replies(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canDownload
                    canComment
                  }
                  customMetadata {
                    __typename
                    property {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                  location {
                    brand {
                      id
                      name
                    }
                    library {
                      id
                      name
                    }
                    workspaceProject {
                      id
                      name
                    }
                    folder {
                      id
                      name
                      breadcrumbs {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query1": query_1,
            "input": input,
        }
        response = await self.execute(
            query=_query, operation_name="syncAssetTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SyncAssetTags.model_validate(data)

    async def uninstall_webhook(
        self, input: UninstallWebhookInput, **kwargs: Any
    ) -> UninstallWebhook:
        query = gql(
            """
            mutation uninstallWebhook($input: UninstallWebhookInput!) {
              uninstallWebhook(input: $input) {
                webhook {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  name
                  notificationUrl
                  secret
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="uninstallWebhook",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UninstallWebhook.model_validate(data)

    async def update_asset(
        self,
        input: UpdateAssetInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateAsset:
        _query = gql(
            """
            mutation updateAsset($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query1: AssetCommentQueryInput, $input: UpdateAssetInput!) {
              updateAsset(input: $input) {
                asset {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  title
                  description
                  attachments {
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    name
                    filename
                    type
                    externalId
                    extension
                    size
                    downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                  }
                  externalId
                  tags {
                    value
                    source
                  }
                  copyright {
                    status
                    notice
                  }
                  expiresAt
                  licenses {
                    id
                    title
                    license
                    addByDefault
                    requireConsensus
                  }
                  status
                  relatedAssets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  comments(limit: $limit4, page: $page4, query: $query1) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      id
                      createdAt
                      modifiedAt
                      content
                      mentionedUsers {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      isResolved
                      replies(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  currentUserPermissions {
                    canEdit
                    canDelete
                    canDownload
                    canComment
                  }
                  customMetadata {
                    __typename
                    property {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                  location {
                    brand {
                      id
                      name
                    }
                    library {
                      id
                      name
                    }
                    workspaceProject {
                      id
                      name
                    }
                    folder {
                      id
                      name
                      breadcrumbs {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query1": query_1,
            "input": input,
        }
        response = await self.execute(
            query=_query, operation_name="updateAsset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateAsset.model_validate(data)

    async def update_collection(
        self,
        input: UpdateCollectionInput,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateCollection:
        _query = gql(
            """
            mutation updateCollection($validityInDays: Int, $permanent: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $input: UpdateCollectionInput!) {
              updateCollection(input: $input) {
                collection {
                  id
                  name
                  assets(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit1, page: $page1, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                  currentUserPermissions {
                    canAddAssets
                    canRemoveAssets
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "input": input,
        }
        response = await self.execute(
            query=_query,
            operation_name="updateCollection",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateCollection.model_validate(data)

    async def update_custom_metadata_property(
        self, input: UpdateCustomMetadataPropertyInput, **kwargs: Any
    ) -> UpdateCustomMetadataProperty:
        query = gql(
            """
            mutation updateCustomMetadataProperty($input: UpdateCustomMetadataPropertyInput!) {
              updateCustomMetadataProperty(input: $input) {
                property {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  name
                  type {
                    __typename
                    name
                  }
                  helpText
                  isRequired
                  defaultValue
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="updateCustomMetadataProperty",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateCustomMetadataProperty.model_validate(data)

    async def update_folder(
        self,
        input: UpdateFolderInput,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_5: Union[Optional[int], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> UpdateFolder:
        _query = gql(
            """
            mutation updateFolder($limit: Int, $page: Int, $limit1: Int, $page1: Int, $limit2: Int, $page2: Int, $validityInDays: Int, $permanent: Boolean, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $query: AssetCommentQueryInput, $limit5: Int, $page5: Int, $input: UpdateFolderInput!) {
              updateFolder(input: $input) {
                folder {
                  __typename
                  id
                  name
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  breadcrumbs {
                    id
                    name
                  }
                  folders(limit: $limit2, page: $page2) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      name
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      breadcrumbs {
                        id
                        name
                      }
                      folders(limit: $limit, page: $page) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      assets(limit: $limit1, page: $page1) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  assets(limit: $limit5, page: $page5) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      createdAt
                      modifiedAt
                      title
                      description
                      attachments {
                        id
                        createdAt
                        modifiedAt
                        name
                        filename
                        type
                        externalId
                        extension
                        size
                        downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                      }
                      externalId
                      tags {
                        value
                        source
                      }
                      copyright {
                        status
                        notice
                      }
                      expiresAt
                      licenses {
                        id
                        title
                        license
                        addByDefault
                        requireConsensus
                      }
                      status
                      relatedAssets(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      comments(limit: $limit4, page: $page4, query: $query) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      currentUserPermissions {
                        canEdit
                        canDelete
                        canDownload
                        canComment
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "limit2": limit_2,
            "page2": page_2,
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "query": query,
            "limit5": limit_5,
            "page5": page_5,
            "input": input,
        }
        response = await self.execute(
            query=_query, operation_name="updateFolder", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateFolder.model_validate(data)

    async def upload_file(self, input: UploadFileInput, **kwargs: Any) -> UploadFile:
        query = gql(
            """
            mutation uploadFile($input: UploadFileInput!) {
              uploadFile(input: $input) {
                id
                urls
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="uploadFile", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UploadFile.model_validate(data)

    async def account(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Account:
        query = gql(
            """
            query account($limit: Int, $page: Int, $limit1: Int, $page1: Int, $limit2: Int, $page2: Int) {
              account {
                id
                users(limit: $limit, page: $page) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                }
                userGroups(limit: $limit2, page: $page2) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    id
                    name
                    users(limit: $limit1, page: $page1) {
                      total
                      page
                      limit
                      hasNextPage
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "limit2": limit_2,
            "page2": page_2,
        }
        response = await self.execute(
            query=query, operation_name="account", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Account.model_validate(data)

    async def asset(
        self,
        id: str,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Asset:
        _query = gql(
            """
            query asset($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $query1: AssetCommentQueryInput, $id: ID!) {
              asset(id: $id) {
                __typename
                id
                creator {
                  __typename
                  id
                  email
                  name
                  avatar
                }
                createdAt
                modifier {
                  __typename
                  id
                  email
                  name
                  avatar
                }
                modifiedAt
                title
                description
                attachments {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  name
                  filename
                  type
                  externalId
                  extension
                  size
                  downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                }
                externalId
                tags {
                  value
                  source
                }
                copyright {
                  status
                  notice
                }
                expiresAt
                licenses {
                  id
                  title
                  license
                  addByDefault
                  requireConsensus
                }
                status
                relatedAssets(limit: $limit2, page: $page2) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    __typename
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    title
                    description
                    attachments {
                      id
                      createdAt
                      modifiedAt
                      name
                      filename
                      type
                      externalId
                      extension
                      size
                      downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                    }
                    externalId
                    tags {
                      value
                      source
                    }
                    copyright {
                      status
                      notice
                    }
                    expiresAt
                    licenses {
                      id
                      title
                      license
                      addByDefault
                      requireConsensus
                    }
                    status
                    relatedAssets(limit: $limit, page: $page) {
                      total
                      page
                      limit
                      hasNextPage
                    }
                    comments(limit: $limit1, page: $page1, query: $query) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        id
                        createdAt
                        modifiedAt
                        content
                        isResolved
                      }
                    }
                    currentUserPermissions {
                      canEdit
                      canDelete
                      canDownload
                      canComment
                    }
                    customMetadata {
                      __typename
                      property {
                        id
                        createdAt
                        modifiedAt
                        name
                        helpText
                        isRequired
                        defaultValue
                      }
                    }
                    location {
                      brand {
                        id
                        name
                      }
                      library {
                        id
                        name
                      }
                      workspaceProject {
                        id
                        name
                      }
                      folder {
                        id
                        name
                      }
                    }
                  }
                }
                comments(limit: $limit3, page: $page3, query: $query1) {
                  total
                  page
                  limit
                  hasNextPage
                }
                currentUserPermissions {
                  canEdit
                  canDelete
                  canDownload
                  canComment
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "query1": query_1,
            "id": id,
        }
        response = await self.execute(
            query=_query, operation_name="asset", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Asset.model_validate(data)

    async def assets(
        self,
        ids: List[str],
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        validity_in_days_1: Union[Optional[int], UnsetType] = UNSET,
        permanent_1: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Assets:
        _query = gql(
            """
            query assets($validityInDays: Int, $permanent: Boolean, $validityInDays1: Int, $permanent1: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $query1: AssetCommentQueryInput, $ids: [ID!]!) {
              assets(ids: $ids) {
                __typename
                id
                creator {
                  __typename
                  id
                  email
                  name
                  avatar
                }
                createdAt
                modifier {
                  __typename
                  id
                  email
                  name
                  avatar
                }
                modifiedAt
                title
                description
                attachments {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  name
                  filename
                  type
                  externalId
                  extension
                  size
                  downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                }
                externalId
                tags {
                  value
                  source
                }
                copyright {
                  status
                  notice
                }
                expiresAt
                licenses {
                  id
                  title
                  license
                  addByDefault
                  requireConsensus
                }
                status
                relatedAssets(limit: $limit2, page: $page2) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    __typename
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    title
                    description
                    attachments {
                      id
                      createdAt
                      modifiedAt
                      name
                      filename
                      type
                      externalId
                      extension
                      size
                      downloadUrl(validityInDays: $validityInDays1, permanent: $permanent1)
                    }
                    externalId
                    tags {
                      value
                      source
                    }
                    copyright {
                      status
                      notice
                    }
                    expiresAt
                    licenses {
                      id
                      title
                      license
                      addByDefault
                      requireConsensus
                    }
                    status
                    relatedAssets(limit: $limit, page: $page) {
                      total
                      page
                      limit
                      hasNextPage
                    }
                    comments(limit: $limit1, page: $page1, query: $query) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        id
                        createdAt
                        modifiedAt
                        content
                        isResolved
                      }
                    }
                    currentUserPermissions {
                      canEdit
                      canDelete
                      canDownload
                      canComment
                    }
                    customMetadata {
                      __typename
                      property {
                        id
                        createdAt
                        modifiedAt
                        name
                        helpText
                        isRequired
                        defaultValue
                      }
                    }
                    location {
                      brand {
                        id
                        name
                      }
                      library {
                        id
                        name
                      }
                      workspaceProject {
                        id
                        name
                      }
                      folder {
                        id
                        name
                      }
                    }
                  }
                }
                comments(limit: $limit3, page: $page3, query: $query1) {
                  total
                  page
                  limit
                  hasNextPage
                }
                currentUserPermissions {
                  canEdit
                  canDelete
                  canDownload
                  canComment
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "validityInDays1": validity_in_days_1,
            "permanent1": permanent_1,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "query1": query_1,
            "ids": ids,
        }
        response = await self.execute(
            query=_query, operation_name="assets", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Assets.model_validate(data)

    async def brand(
        self,
        id: str,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetQueryInput], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        limit_5: Union[Optional[int], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        limit_6: Union[Optional[int], UnsetType] = UNSET,
        page_6: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Brand:
        _query = gql(
            """
            query brand($limit: Int, $page: Int, $query: AssetQueryInput, $limit1: Int, $page1: Int, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $limit5: Int, $page5: Int, $limit6: Int, $page6: Int, $id: ID!) {
              brand(id: $id) {
                id
                name
                rgbaColor {
                  red
                  green
                  blue
                  alpha
                }
                avatar
                slug
                libraries(limit: $limit5, page: $page5) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    __typename
                    id
                    name
                    color {
                      red
                      green
                      blue
                      alpha
                    }
                    assets(limit: $limit, page: $page, query: $query) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        __typename
                        id
                        createdAt
                        modifiedAt
                        title
                        description
                        externalId
                        expiresAt
                        status
                      }
                    }
                    licenses {
                      id
                      title
                      license
                      addByDefault
                      requireConsensus
                    }
                    collections(limit: $limit1, page: $page1) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        id
                        name
                      }
                    }
                    browse {
                      folders(limit: $limit2, page: $page2) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      assets(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                    collaborators {
                      users(limit: $limit4, page: $page4) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                    currentUserPermissions {
                      canCreateAssets
                      canViewCollaborators
                      canCreateCollections
                    }
                    customMetadataProperties {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                }
                workspaceProjects(limit: $limit6, page: $page6) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    id
                    name
                    customMetadata {
                      __typename
                      property {
                        id
                        createdAt
                        modifiedAt
                        name
                        helpText
                        isRequired
                        defaultValue
                      }
                    }
                  }
                }
                customMetadataProperties {
                  id
                  createdAt
                  modifiedAt
                  name
                  helpText
                  isRequired
                  defaultValue
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "limit": limit,
            "page": page,
            "query": query,
            "limit1": limit_1,
            "page1": page_1,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "limit5": limit_5,
            "page5": page_5,
            "limit6": limit_6,
            "page6": page_6,
            "id": id,
        }
        response = await self.execute(
            query=_query, operation_name="brand", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Brand.model_validate(data)

    async def brands(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetQueryInput], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        limit_5: Union[Optional[int], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        limit_6: Union[Optional[int], UnsetType] = UNSET,
        page_6: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Brands:
        _query = gql(
            """
            query brands($limit: Int, $page: Int, $query: AssetQueryInput, $limit1: Int, $page1: Int, $limit2: Int, $page2: Int, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $limit5: Int, $page5: Int, $limit6: Int, $page6: Int) {
              brands {
                id
                name
                rgbaColor {
                  red
                  green
                  blue
                  alpha
                }
                avatar
                slug
                libraries(limit: $limit5, page: $page5) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    __typename
                    id
                    name
                    color {
                      red
                      green
                      blue
                      alpha
                    }
                    assets(limit: $limit, page: $page, query: $query) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        __typename
                        id
                        createdAt
                        modifiedAt
                        title
                        description
                        externalId
                        expiresAt
                        status
                      }
                    }
                    licenses {
                      id
                      title
                      license
                      addByDefault
                      requireConsensus
                    }
                    collections(limit: $limit1, page: $page1) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        id
                        name
                      }
                    }
                    browse {
                      folders(limit: $limit2, page: $page2) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      assets(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                    collaborators {
                      users(limit: $limit4, page: $page4) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                    currentUserPermissions {
                      canCreateAssets
                      canViewCollaborators
                      canCreateCollections
                    }
                    customMetadataProperties {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      type {
                        __typename
                        name
                      }
                      helpText
                      isRequired
                      defaultValue
                    }
                  }
                }
                workspaceProjects(limit: $limit6, page: $page6) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    id
                    name
                    customMetadata {
                      __typename
                      property {
                        id
                        createdAt
                        modifiedAt
                        name
                        helpText
                        isRequired
                        defaultValue
                      }
                    }
                  }
                }
                customMetadataProperties {
                  id
                  createdAt
                  modifiedAt
                  name
                  helpText
                  isRequired
                  defaultValue
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "limit": limit,
            "page": page,
            "query": query,
            "limit1": limit_1,
            "page1": page_1,
            "limit2": limit_2,
            "page2": page_2,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "limit5": limit_5,
            "page5": page_5,
            "limit6": limit_6,
            "page6": page_6,
        }
        response = await self.execute(
            query=_query, operation_name="brands", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Brands.model_validate(data)

    async def client_tracking_id(self, **kwargs: Any) -> ClientTrackingId:
        query = gql(
            """
            query clientTrackingId {
              clientTrackingId
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query,
            operation_name="clientTrackingId",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ClientTrackingId.model_validate(data)

    async def current_user(self, **kwargs: Any) -> CurrentUser:
        query = gql(
            """
            query currentUser {
              currentUser {
                __typename
                id
                email
                name
                avatar
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="currentUser", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CurrentUser.model_validate(data)

    async def library(
        self,
        id: str,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetQueryInput], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        limit_5: Union[Optional[int], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        limit_6: Union[Optional[int], UnsetType] = UNSET,
        page_6: Union[Optional[int], UnsetType] = UNSET,
        limit_7: Union[Optional[int], UnsetType] = UNSET,
        page_7: Union[Optional[int], UnsetType] = UNSET,
        limit_8: Union[Optional[int], UnsetType] = UNSET,
        page_8: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Library:
        _query = gql(
            """
            query library($validityInDays: Int, $permanent: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $query1: AssetQueryInput, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $limit5: Int, $page5: Int, $limit6: Int, $page6: Int, $limit7: Int, $page7: Int, $limit8: Int, $page8: Int, $id: ID!) {
              library(id: $id) {
                __typename
                id
                name
                color {
                  red
                  green
                  blue
                  alpha
                }
                assets(limit: $limit2, page: $page2, query: $query1) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    __typename
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    title
                    description
                    attachments {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      filename
                      type
                      externalId
                      extension
                      size
                      downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                    }
                    externalId
                    tags {
                      value
                      source
                    }
                    copyright {
                      status
                      notice
                    }
                    expiresAt
                    licenses {
                      id
                      title
                      license
                      addByDefault
                      requireConsensus
                    }
                    status
                    relatedAssets(limit: $limit, page: $page) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        __typename
                        id
                        createdAt
                        modifiedAt
                        title
                        description
                        externalId
                        expiresAt
                        status
                      }
                    }
                    comments(limit: $limit1, page: $page1, query: $query) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        id
                        createdAt
                        modifiedAt
                        content
                        isResolved
                      }
                    }
                    currentUserPermissions {
                      canEdit
                      canDelete
                      canDownload
                      canComment
                    }
                    customMetadata {
                      __typename
                      property {
                        id
                        createdAt
                        modifiedAt
                        name
                        helpText
                        isRequired
                        defaultValue
                      }
                    }
                    location {
                      brand {
                        id
                        name
                      }
                      library {
                        id
                        name
                      }
                      workspaceProject {
                        id
                        name
                      }
                      folder {
                        id
                        name
                      }
                    }
                  }
                }
                licenses {
                  id
                  title
                  license
                  addByDefault
                  requireConsensus
                }
                collections(limit: $limit4, page: $page4) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    id
                    name
                    assets(limit: $limit3, page: $page3) {
                      total
                      page
                      limit
                      hasNextPage
                    }
                  }
                }
                browse {
                  folders(limit: $limit6, page: $page6) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      name
                      createdAt
                      modifiedAt
                      breadcrumbs {
                        id
                        name
                      }
                      folders(limit: $limit5, page: $page5) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  assets(limit: $limit7, page: $page7) {
                    total
                    page
                    limit
                    hasNextPage
                  }
                }
                collaborators {
                  users(limit: $limit8, page: $page8) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                  }
                }
                currentUserPermissions {
                  canCreateAssets
                  canViewCollaborators
                  canCreateCollections
                }
                customMetadataProperties {
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  modifier {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  modifiedAt
                  name
                  type {
                    __typename
                    name
                  }
                  helpText
                  isRequired
                  defaultValue
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "query1": query_1,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "limit5": limit_5,
            "page5": page_5,
            "limit6": limit_6,
            "page6": page_6,
            "limit7": limit_7,
            "page7": page_7,
            "limit8": limit_8,
            "page8": page_8,
            "id": id,
        }
        response = await self.execute(
            query=_query, operation_name="library", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Library.model_validate(data)

    async def node(self, id: str, **kwargs: Any) -> Node:
        query = gql(
            """
            query node($id: ID!) {
              node(id: $id) {
                __typename
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="node", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Node.model_validate(data)

    async def webhooks(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Webhooks:
        query = gql(
            """
            query webhooks($limit: Int, $page: Int) {
              webhooks(limit: $limit, page: $page) {
                total
                page
                limit
                hasNextPage
                items {
                  __typename
                  id
                  creator {
                    __typename
                    id
                    email
                    name
                    avatar
                  }
                  createdAt
                  name
                  notificationUrl
                  secret
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "page": page}
        response = await self.execute(
            query=query, operation_name="webhooks", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Webhooks.model_validate(data)

    async def workspace_project(
        self,
        id: str,
        validity_in_days: Union[Optional[int], UnsetType] = UNSET,
        permanent: Union[Optional[bool], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        limit_1: Union[Optional[int], UnsetType] = UNSET,
        page_1: Union[Optional[int], UnsetType] = UNSET,
        query: Union[Optional[AssetCommentQueryInput], UnsetType] = UNSET,
        limit_2: Union[Optional[int], UnsetType] = UNSET,
        page_2: Union[Optional[int], UnsetType] = UNSET,
        query_1: Union[Optional[AssetQueryInput], UnsetType] = UNSET,
        limit_3: Union[Optional[int], UnsetType] = UNSET,
        page_3: Union[Optional[int], UnsetType] = UNSET,
        limit_4: Union[Optional[int], UnsetType] = UNSET,
        page_4: Union[Optional[int], UnsetType] = UNSET,
        limit_5: Union[Optional[int], UnsetType] = UNSET,
        page_5: Union[Optional[int], UnsetType] = UNSET,
        limit_6: Union[Optional[int], UnsetType] = UNSET,
        page_6: Union[Optional[int], UnsetType] = UNSET,
        limit_7: Union[Optional[int], UnsetType] = UNSET,
        page_7: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> WorkspaceProject:
        _query = gql(
            """
            query workspaceProject($validityInDays: Int, $permanent: Boolean, $limit: Int, $page: Int, $limit1: Int, $page1: Int, $query: AssetCommentQueryInput, $limit2: Int, $page2: Int, $query1: AssetQueryInput, $limit3: Int, $page3: Int, $limit4: Int, $page4: Int, $limit5: Int, $page5: Int, $limit6: Int, $page6: Int, $limit7: Int, $page7: Int, $id: ID!) {
              workspaceProject(id: $id) {
                id
                name
                color {
                  red
                  green
                  blue
                  alpha
                }
                assets(limit: $limit2, page: $page2, query: $query1) {
                  total
                  page
                  limit
                  hasNextPage
                  items {
                    __typename
                    id
                    creator {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    createdAt
                    modifier {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                    modifiedAt
                    title
                    description
                    attachments {
                      id
                      creator {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      createdAt
                      modifier {
                        __typename
                        id
                        email
                        name
                        avatar
                      }
                      modifiedAt
                      name
                      filename
                      type
                      externalId
                      extension
                      size
                      downloadUrl(validityInDays: $validityInDays, permanent: $permanent)
                    }
                    externalId
                    tags {
                      value
                      source
                    }
                    copyright {
                      status
                      notice
                    }
                    expiresAt
                    licenses {
                      id
                      title
                      license
                      addByDefault
                      requireConsensus
                    }
                    status
                    relatedAssets(limit: $limit, page: $page) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        __typename
                        id
                        createdAt
                        modifiedAt
                        title
                        description
                        externalId
                        expiresAt
                        status
                      }
                    }
                    comments(limit: $limit1, page: $page1, query: $query) {
                      total
                      page
                      limit
                      hasNextPage
                      items {
                        id
                        createdAt
                        modifiedAt
                        content
                        isResolved
                      }
                    }
                    currentUserPermissions {
                      canEdit
                      canDelete
                      canDownload
                      canComment
                    }
                    customMetadata {
                      __typename
                      property {
                        id
                        createdAt
                        modifiedAt
                        name
                        helpText
                        isRequired
                        defaultValue
                      }
                    }
                    location {
                      brand {
                        id
                        name
                      }
                      library {
                        id
                        name
                      }
                      workspaceProject {
                        id
                        name
                      }
                      folder {
                        id
                        name
                      }
                    }
                  }
                }
                licenses {
                  id
                  title
                  license
                  addByDefault
                  requireConsensus
                }
                browse {
                  folders(limit: $limit5, page: $page5) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      name
                      createdAt
                      modifiedAt
                      breadcrumbs {
                        id
                        name
                      }
                      folders(limit: $limit3, page: $page3) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                      assets(limit: $limit4, page: $page4) {
                        total
                        page
                        limit
                        hasNextPage
                      }
                    }
                  }
                  assets(limit: $limit6, page: $page6) {
                    total
                    page
                    limit
                    hasNextPage
                  }
                }
                collaborators {
                  users(limit: $limit7, page: $page7) {
                    total
                    page
                    limit
                    hasNextPage
                    items {
                      __typename
                      id
                      email
                      name
                      avatar
                    }
                  }
                }
                currentUserPermissions {
                  canCreateAssets
                  canViewCollaborators
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "validityInDays": validity_in_days,
            "permanent": permanent,
            "limit": limit,
            "page": page,
            "limit1": limit_1,
            "page1": page_1,
            "query": query,
            "limit2": limit_2,
            "page2": page_2,
            "query1": query_1,
            "limit3": limit_3,
            "page3": page_3,
            "limit4": limit_4,
            "page4": page_4,
            "limit5": limit_5,
            "page5": page_5,
            "limit6": limit_6,
            "page6": page_6,
            "limit7": limit_7,
            "page7": page_7,
            "id": id,
        }
        response = await self.execute(
            query=_query,
            operation_name="workspaceProject",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return WorkspaceProject.model_validate(data)
