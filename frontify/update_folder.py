# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType, CopyrightStatus, TagSource


class UpdateFolder(BaseModel):
    update_folder: Optional["UpdateFolderUpdateFolder"] = Field(alias="updateFolder")


class UpdateFolderUpdateFolder(BaseModel):
    folder: Optional["UpdateFolderUpdateFolderFolder"]


class UpdateFolderUpdateFolderFolder(BaseModel):
    typename__: Literal["Folder", "SubFolder"] = Field(alias="__typename")
    id: str
    name: str
    creator: "UpdateFolderUpdateFolderFolderCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["UpdateFolderUpdateFolderFolderModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    breadcrumbs: List["UpdateFolderUpdateFolderFolderBreadcrumbs"]
    folders: "UpdateFolderUpdateFolderFolderFolders"
    assets: "UpdateFolderUpdateFolderFolderAssets"


class UpdateFolderUpdateFolderFolderCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class UpdateFolderUpdateFolderFolderModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class UpdateFolderUpdateFolderFolderBreadcrumbs(BaseModel):
    id: Optional[str]
    name: Optional[str]


class UpdateFolderUpdateFolderFolderFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["UpdateFolderUpdateFolderFolderFoldersItems"]]]


class UpdateFolderUpdateFolderFolderFoldersItems(BaseModel):
    typename__: Literal["Folder", "SubFolder"] = Field(alias="__typename")
    id: str
    name: str
    creator: "UpdateFolderUpdateFolderFolderFoldersItemsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["UpdateFolderUpdateFolderFolderFoldersItemsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    breadcrumbs: List["UpdateFolderUpdateFolderFolderFoldersItemsBreadcrumbs"]
    folders: "UpdateFolderUpdateFolderFolderFoldersItemsFolders"
    assets: "UpdateFolderUpdateFolderFolderFoldersItemsAssets"


class UpdateFolderUpdateFolderFolderFoldersItemsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class UpdateFolderUpdateFolderFolderFoldersItemsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class UpdateFolderUpdateFolderFolderFoldersItemsBreadcrumbs(BaseModel):
    id: Optional[str]
    name: Optional[str]


class UpdateFolderUpdateFolderFolderFoldersItemsFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class UpdateFolderUpdateFolderFolderFoldersItemsAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class UpdateFolderUpdateFolderFolderAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["UpdateFolderUpdateFolderFolderAssetsItems"]]]


class UpdateFolderUpdateFolderFolderAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[Optional["UpdateFolderUpdateFolderFolderAssetsItemsAttachments"]]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["UpdateFolderUpdateFolderFolderAssetsItemsTags"]]]
    copyright: Optional["UpdateFolderUpdateFolderFolderAssetsItemsCopyright"]
    availability: "UpdateFolderUpdateFolderFolderAssetsItemsAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[Optional["UpdateFolderUpdateFolderFolderAssetsItemsLicenses"]]
    ]
    status: AssetStatusType
    related_assets: "UpdateFolderUpdateFolderFolderAssetsItemsRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["UpdateFolderUpdateFolderFolderAssetsItemsComments"]
    current_user_permissions: (
        "UpdateFolderUpdateFolderFolderAssetsItemsCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    workflow_task: Optional["UpdateFolderUpdateFolderFolderAssetsItemsWorkflowTask"] = (
        Field(alias="workflowTask")
    )
    variants: Optional["UpdateFolderUpdateFolderFolderAssetsItemsVariants"]
    preview_background_color: Optional[
        "UpdateFolderUpdateFolderFolderAssetsItemsPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class UpdateFolderUpdateFolderFolderAssetsItemsAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class UpdateFolderUpdateFolderFolderAssetsItemsTags(BaseModel):
    value: str
    source: Optional[TagSource]


class UpdateFolderUpdateFolderFolderAssetsItemsCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class UpdateFolderUpdateFolderFolderAssetsItemsAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class UpdateFolderUpdateFolderFolderAssetsItemsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class UpdateFolderUpdateFolderFolderAssetsItemsRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class UpdateFolderUpdateFolderFolderAssetsItemsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class UpdateFolderUpdateFolderFolderAssetsItemsCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class UpdateFolderUpdateFolderFolderAssetsItemsWorkflowTask(BaseModel):
    id: str
    title: Optional[str]
    description: Optional[str]


class UpdateFolderUpdateFolderFolderAssetsItemsVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class UpdateFolderUpdateFolderFolderAssetsItemsPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


UpdateFolder.model_rebuild()
UpdateFolderUpdateFolder.model_rebuild()
UpdateFolderUpdateFolderFolder.model_rebuild()
UpdateFolderUpdateFolderFolderFolders.model_rebuild()
UpdateFolderUpdateFolderFolderFoldersItems.model_rebuild()
UpdateFolderUpdateFolderFolderAssets.model_rebuild()
UpdateFolderUpdateFolderFolderAssetsItems.model_rebuild()
