# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType, CopyrightStatus, TagSource


class CreateCollection(BaseModel):
    create_collection: Optional["CreateCollectionCreateCollection"] = Field(
        alias="createCollection"
    )


class CreateCollectionCreateCollection(BaseModel):
    collection: "CreateCollectionCreateCollectionCollection"


class CreateCollectionCreateCollectionCollection(BaseModel):
    id: str
    name: str
    assets: "CreateCollectionCreateCollectionCollectionAssets"
    current_user_permissions: (
        "CreateCollectionCreateCollectionCollectionCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")


class CreateCollectionCreateCollectionCollectionAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["CreateCollectionCreateCollectionCollectionAssetsItems"]]
    ]


class CreateCollectionCreateCollectionCollectionAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "CreateCollectionCreateCollectionCollectionAssetsItemsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["CreateCollectionCreateCollectionCollectionAssetsItemsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[
            Optional["CreateCollectionCreateCollectionCollectionAssetsItemsAttachments"]
        ]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[
        List[Optional["CreateCollectionCreateCollectionCollectionAssetsItemsTags"]]
    ]
    copyright: Optional[
        "CreateCollectionCreateCollectionCollectionAssetsItemsCopyright"
    ]
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[Optional["CreateCollectionCreateCollectionCollectionAssetsItemsLicenses"]]
    ]
    status: AssetStatusType
    related_assets: (
        "CreateCollectionCreateCollectionCollectionAssetsItemsRelatedAssets"
    ) = Field(alias="relatedAssets")
    comments: Optional["CreateCollectionCreateCollectionCollectionAssetsItemsComments"]
    current_user_permissions: (
        "CreateCollectionCreateCollectionCollectionAssetsItemsCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")


class CreateCollectionCreateCollectionCollectionAssetsItemsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class CreateCollectionCreateCollectionCollectionAssetsItemsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class CreateCollectionCreateCollectionCollectionAssetsItemsAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class CreateCollectionCreateCollectionCollectionAssetsItemsTags(BaseModel):
    value: str
    source: Optional[TagSource]


class CreateCollectionCreateCollectionCollectionAssetsItemsCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class CreateCollectionCreateCollectionCollectionAssetsItemsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class CreateCollectionCreateCollectionCollectionAssetsItemsRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateCollectionCreateCollectionCollectionAssetsItemsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateCollectionCreateCollectionCollectionAssetsItemsCurrentUserPermissions(
    BaseModel
):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class CreateCollectionCreateCollectionCollectionCurrentUserPermissions(BaseModel):
    can_add_assets: bool = Field(alias="canAddAssets")
    can_remove_assets: bool = Field(alias="canRemoveAssets")


CreateCollection.model_rebuild()
CreateCollectionCreateCollection.model_rebuild()
CreateCollectionCreateCollectionCollection.model_rebuild()
CreateCollectionCreateCollectionCollectionAssets.model_rebuild()
CreateCollectionCreateCollectionCollectionAssetsItems.model_rebuild()
