# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType, CopyrightStatus, TagSource, WorkflowStatusEnterRule


class RemoveAssetLicense(BaseModel):
    remove_asset_license: Optional["RemoveAssetLicenseRemoveAssetLicense"] = Field(
        alias="removeAssetLicense"
    )


class RemoveAssetLicenseRemoveAssetLicense(BaseModel):
    asset: Optional["RemoveAssetLicenseRemoveAssetLicenseAsset"]
    license: Optional["RemoveAssetLicenseRemoveAssetLicenseLicense"]


class RemoveAssetLicenseRemoveAssetLicenseAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "RemoveAssetLicenseRemoveAssetLicenseAssetCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["RemoveAssetLicenseRemoveAssetLicenseAssetModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[Optional["RemoveAssetLicenseRemoveAssetLicenseAssetAttachments"]]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["RemoveAssetLicenseRemoveAssetLicenseAssetTags"]]]
    copyright: Optional["RemoveAssetLicenseRemoveAssetLicenseAssetCopyright"]
    availability: "RemoveAssetLicenseRemoveAssetLicenseAssetAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[Optional["RemoveAssetLicenseRemoveAssetLicenseAssetLicenses"]]
    ]
    status: AssetStatusType
    related_assets: "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["RemoveAssetLicenseRemoveAssetLicenseAssetComments"]
    current_user_permissions: (
        "RemoveAssetLicenseRemoveAssetLicenseAssetCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    custom_metadata: List["RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadata"] = (
        Field(alias="customMetadata")
    )
    workflow_task: Optional["RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTask"] = (
        Field(alias="workflowTask")
    )


class RemoveAssetLicenseRemoveAssetLicenseAssetCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetAttachments(BaseModel):
    id: str
    creator: "RemoveAssetLicenseRemoveAssetLicenseAssetAttachmentsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["RemoveAssetLicenseRemoveAssetLicenseAssetAttachmentsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class RemoveAssetLicenseRemoveAssetLicenseAssetAttachmentsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetAttachmentsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetTags(BaseModel):
    value: str
    source: Optional[TagSource]


class RemoveAssetLicenseRemoveAssetLicenseAssetCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class RemoveAssetLicenseRemoveAssetLicenseAssetLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItems"]]
    ]


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    creator: "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional[
        "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsModifier"
    ]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[
            Optional[
                "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsAttachments"
            ]
        ]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[
        List[
            Optional["RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsTags"]
        ]
    ]
    copyright: Optional[
        "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsCopyright"
    ]
    availability: (
        "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsAvailability"
    )
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[
            Optional[
                "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsLicenses"
            ]
        ]
    ]
    status: AssetStatusType
    related_assets: (
        "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsRelatedAssets"
    ) = Field(alias="relatedAssets")
    comments: Optional[
        "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsComments"
    ]
    current_user_permissions: (
        "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    workflow_task: Optional[
        "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsWorkflowTask"
    ] = Field(alias="workflowTask")
    variants: Optional[
        "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsVariants"
    ]
    preview_background_color: Optional[
        "RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsTags(BaseModel):
    value: str
    source: Optional[TagSource]


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsAvailability(
    BaseModel
):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsRelatedAssets(
    BaseModel
):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsCurrentUserPermissions(
    BaseModel
):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsWorkflowTask(
    BaseModel
):
    id: str
    title: Optional[str]
    description: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItemsPreviewBackgroundColor(
    BaseModel
):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class RemoveAssetLicenseRemoveAssetLicenseAssetComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["RemoveAssetLicenseRemoveAssetLicenseAssetCommentsItems"]]
    ]


class RemoveAssetLicenseRemoveAssetLicenseAssetCommentsItems(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    content: str
    mentioned_users: List[
        Optional["RemoveAssetLicenseRemoveAssetLicenseAssetCommentsItemsMentionedUsers"]
    ] = Field(alias="mentionedUsers")
    is_resolved: bool = Field(alias="isResolved")
    replies: "RemoveAssetLicenseRemoveAssetLicenseAssetCommentsItemsReplies"


class RemoveAssetLicenseRemoveAssetLicenseAssetCommentsItemsMentionedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetCommentsItemsReplies(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class RemoveAssetLicenseRemoveAssetLicenseAssetCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadata(BaseModel):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadataProperty"


class RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadataProperty(BaseModel):
    id: str
    creator: "RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadataPropertyCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional[
        "RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadataPropertyModifier"
    ]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    type: "RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadataPropertyType"
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadataPropertyCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadataPropertyModifier(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadataPropertyType(BaseModel):
    typename__: Literal[
        "CustomMetadataPropertyType",
        "CustomMetadataPropertyTypeDate",
        "CustomMetadataPropertyTypeLongText",
        "CustomMetadataPropertyTypeMultiSelect",
        "CustomMetadataPropertyTypeNumber",
        "CustomMetadataPropertyTypeSelect",
        "CustomMetadataPropertyTypeText",
        "CustomMetadataPropertyTypeUrl",
    ] = Field(alias="__typename")
    name: str


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTask(BaseModel):
    id: str
    assigned_users: List[
        Optional["RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskAssignedUsers"]
    ] = Field(alias="assignedUsers")
    asset: Optional["RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskAsset"]
    title: Optional[str]
    description: Optional[str]
    status: "RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatus"
    checklist_item: (
        "RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskChecklistItem"
    ) = Field(alias="checklistItem")


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType
    variants: Optional[
        "RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskAssetVariants"
    ]
    preview_background_color: Optional[
        "RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskAssetPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskAssetVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskAssetPreviewBackgroundColor(
    BaseModel
):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatus(BaseModel):
    id: str
    name: str
    color: "RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatusColor"
    assigned_users: List[
        Optional[
            "RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatusAssignedUsers"
        ]
    ] = Field(alias="assignedUsers")
    checklist_presets: List[
        Optional[
            "RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatusChecklistPresets"
        ]
    ] = Field(alias="checklistPresets")
    tasks: "RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatusTasks"
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatusColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatusAssignedUsers(
    BaseModel
):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatusChecklistPresets(
    BaseModel
):
    id: str
    content: str


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatusTasks(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskChecklistItem(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional[
                "RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskChecklistItemItems"
            ]
        ]
    ]


class RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskChecklistItemItems(
    BaseModel
):
    id: str
    content: str


class RemoveAssetLicenseRemoveAssetLicenseLicense(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


RemoveAssetLicense.model_rebuild()
RemoveAssetLicenseRemoveAssetLicense.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAsset.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetAttachments.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssets.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetRelatedAssetsItems.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetComments.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetCommentsItems.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadata.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetCustomMetadataProperty.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTask.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskAsset.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskStatus.model_rebuild()
RemoveAssetLicenseRemoveAssetLicenseAssetWorkflowTaskChecklistItem.model_rebuild()
