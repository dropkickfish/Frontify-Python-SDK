# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType, CopyrightStatus, TagSource


class CreateFolder(BaseModel):
    create_folder: Optional["CreateFolderCreateFolder"] = Field(alias="createFolder")


class CreateFolderCreateFolder(BaseModel):
    folder: Optional["CreateFolderCreateFolderFolder"]


class CreateFolderCreateFolderFolder(BaseModel):
    typename__: Literal["Folder", "SubFolder"] = Field(alias="__typename")
    id: str
    name: str
    creator: "CreateFolderCreateFolderFolderCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["CreateFolderCreateFolderFolderModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    breadcrumbs: List["CreateFolderCreateFolderFolderBreadcrumbs"]
    folders: "CreateFolderCreateFolderFolderFolders"
    assets: "CreateFolderCreateFolderFolderAssets"


class CreateFolderCreateFolderFolderCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class CreateFolderCreateFolderFolderModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class CreateFolderCreateFolderFolderBreadcrumbs(BaseModel):
    id: Optional[str]
    name: Optional[str]


class CreateFolderCreateFolderFolderFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["CreateFolderCreateFolderFolderFoldersItems"]]]


class CreateFolderCreateFolderFolderFoldersItems(BaseModel):
    typename__: Literal["Folder", "SubFolder"] = Field(alias="__typename")
    id: str
    name: str
    creator: "CreateFolderCreateFolderFolderFoldersItemsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["CreateFolderCreateFolderFolderFoldersItemsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    breadcrumbs: List["CreateFolderCreateFolderFolderFoldersItemsBreadcrumbs"]
    folders: "CreateFolderCreateFolderFolderFoldersItemsFolders"
    assets: "CreateFolderCreateFolderFolderFoldersItemsAssets"


class CreateFolderCreateFolderFolderFoldersItemsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class CreateFolderCreateFolderFolderFoldersItemsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class CreateFolderCreateFolderFolderFoldersItemsBreadcrumbs(BaseModel):
    id: Optional[str]
    name: Optional[str]


class CreateFolderCreateFolderFolderFoldersItemsFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateFolderCreateFolderFolderFoldersItemsAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateFolderCreateFolderFolderAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["CreateFolderCreateFolderFolderAssetsItems"]]]


class CreateFolderCreateFolderFolderAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    attachments: Optional[
        List[Optional["CreateFolderCreateFolderFolderAssetsItemsAttachments"]]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["CreateFolderCreateFolderFolderAssetsItemsTags"]]]
    copyright: Optional["CreateFolderCreateFolderFolderAssetsItemsCopyright"]
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[Optional["CreateFolderCreateFolderFolderAssetsItemsLicenses"]]
    ]
    status: AssetStatusType
    related_assets: "CreateFolderCreateFolderFolderAssetsItemsRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["CreateFolderCreateFolderFolderAssetsItemsComments"]
    current_user_permissions: (
        "CreateFolderCreateFolderFolderAssetsItemsCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")


class CreateFolderCreateFolderFolderAssetsItemsAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class CreateFolderCreateFolderFolderAssetsItemsTags(BaseModel):
    value: str
    source: Optional[TagSource]


class CreateFolderCreateFolderFolderAssetsItemsCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class CreateFolderCreateFolderFolderAssetsItemsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class CreateFolderCreateFolderFolderAssetsItemsRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateFolderCreateFolderFolderAssetsItemsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateFolderCreateFolderFolderAssetsItemsCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


CreateFolder.model_rebuild()
CreateFolderCreateFolder.model_rebuild()
CreateFolderCreateFolderFolder.model_rebuild()
CreateFolderCreateFolderFolderFolders.model_rebuild()
CreateFolderCreateFolderFolderFoldersItems.model_rebuild()
CreateFolderCreateFolderFolderAssets.model_rebuild()
CreateFolderCreateFolderFolderAssetsItems.model_rebuild()
