# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Literal, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import AssetStatusType


class Brand(BaseModel):
    brand: Optional["BrandBrand"]


class BrandBrand(BaseModel):
    id: str
    name: str
    rgba_color: Optional["BrandBrandRgbaColor"] = Field(alias="rgbaColor")
    avatar: Optional[Any]
    slug: Optional[str]
    libraries: Optional["BrandBrandLibraries"]
    workspace_projects: Optional["BrandBrandWorkspaceProjects"] = Field(
        alias="workspaceProjects"
    )
    custom_metadata_properties: List["BrandBrandCustomMetadataProperties"] = Field(
        alias="customMetadataProperties"
    )


class BrandBrandRgbaColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandBrandLibraries(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandLibrariesItems"]]]


class BrandBrandLibrariesItems(BaseModel):
    typename__: Literal[
        "DocumentLibrary", "IconLibrary", "Library", "LogoLibrary", "MediaLibrary"
    ] = Field(alias="__typename")
    id: str
    name: str
    color: Optional["BrandBrandLibrariesItemsColor"]
    assets: "BrandBrandLibrariesItemsAssets"
    licenses: Optional[List[Optional["BrandBrandLibrariesItemsLicenses"]]]
    collections: "BrandBrandLibrariesItemsCollections"
    browse: "BrandBrandLibrariesItemsBrowse"
    collaborators: Optional["BrandBrandLibrariesItemsCollaborators"]
    current_user_permissions: "BrandBrandLibrariesItemsCurrentUserPermissions" = Field(
        alias="currentUserPermissions"
    )
    custom_metadata_properties: List[
        "BrandBrandLibrariesItemsCustomMetadataProperties"
    ] = Field(alias="customMetadataProperties")


class BrandBrandLibrariesItemsColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandBrandLibrariesItemsAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandLibrariesItemsAssetsItems"]]]


class BrandBrandLibrariesItemsAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class BrandBrandLibrariesItemsLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class BrandBrandLibrariesItemsCollections(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandLibrariesItemsCollectionsItems"]]]


class BrandBrandLibrariesItemsCollectionsItems(BaseModel):
    id: str
    name: str


class BrandBrandLibrariesItemsBrowse(BaseModel):
    folders: "BrandBrandLibrariesItemsBrowseFolders"
    assets: "BrandBrandLibrariesItemsBrowseAssets"


class BrandBrandLibrariesItemsBrowseFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandBrandLibrariesItemsBrowseAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandBrandLibrariesItemsCollaborators(BaseModel):
    users: "BrandBrandLibrariesItemsCollaboratorsUsers"


class BrandBrandLibrariesItemsCollaboratorsUsers(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandBrandLibrariesItemsCurrentUserPermissions(BaseModel):
    can_create_assets: bool = Field(alias="canCreateAssets")
    can_view_collaborators: bool = Field(alias="canViewCollaborators")
    can_create_collections: bool = Field(alias="canCreateCollections")


class BrandBrandLibrariesItemsCustomMetadataProperties(BaseModel):
    id: str
    creator: "BrandBrandLibrariesItemsCustomMetadataPropertiesCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandBrandLibrariesItemsCustomMetadataPropertiesModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    type: "BrandBrandLibrariesItemsCustomMetadataPropertiesType"
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class BrandBrandLibrariesItemsCustomMetadataPropertiesCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class BrandBrandLibrariesItemsCustomMetadataPropertiesModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    email: Any
    name: Optional[str]
    avatar: Optional[Any]


class BrandBrandLibrariesItemsCustomMetadataPropertiesType(BaseModel):
    typename__: Literal[
        "CustomMetadataPropertyType",
        "CustomMetadataPropertyTypeDate",
        "CustomMetadataPropertyTypeLongText",
        "CustomMetadataPropertyTypeMultiSelect",
        "CustomMetadataPropertyTypeNumber",
        "CustomMetadataPropertyTypeSelect",
        "CustomMetadataPropertyTypeText",
        "CustomMetadataPropertyTypeUrl",
    ] = Field(alias="__typename")
    name: str


class BrandBrandWorkspaceProjects(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandWorkspaceProjectsItems"]]]


class BrandBrandWorkspaceProjectsItems(BaseModel):
    id: str
    name: str
    custom_metadata: List["BrandBrandWorkspaceProjectsItemsCustomMetadata"] = Field(
        alias="customMetadata"
    )


class BrandBrandWorkspaceProjectsItemsCustomMetadata(BaseModel):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "BrandBrandWorkspaceProjectsItemsCustomMetadataProperty"


class BrandBrandWorkspaceProjectsItemsCustomMetadataProperty(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class BrandBrandCustomMetadataProperties(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


Brand.model_rebuild()
BrandBrand.model_rebuild()
BrandBrandLibraries.model_rebuild()
BrandBrandLibrariesItems.model_rebuild()
BrandBrandLibrariesItemsAssets.model_rebuild()
BrandBrandLibrariesItemsCollections.model_rebuild()
BrandBrandLibrariesItemsBrowse.model_rebuild()
BrandBrandLibrariesItemsCollaborators.model_rebuild()
BrandBrandLibrariesItemsCustomMetadataProperties.model_rebuild()
BrandBrandWorkspaceProjects.model_rebuild()
BrandBrandWorkspaceProjectsItems.model_rebuild()
BrandBrandWorkspaceProjectsItemsCustomMetadata.model_rebuild()
