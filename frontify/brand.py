# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AssetStatusType,
    CopyrightStatus,
    CreativeTemplateVariableType,
    LanguageCode,
    LibraryType,
    TagSource,
    WorkflowStatusEnterRule,
)


class Brand(BaseModel):
    brand: Optional["BrandBrand"]


class BrandBrand(BaseModel):
    id: str
    name: str
    rgba_color: Optional["BrandBrandRgbaColor"] = Field(alias="rgbaColor")
    avatar: Optional[Any]
    slug: Optional[str]
    search: Optional["BrandBrandSearch"]
    libraries: Optional["BrandBrandLibraries"]
    workspace_projects: Optional["BrandBrandWorkspaceProjects"] = Field(
        alias="workspaceProjects"
    )
    guidelines: Optional["BrandBrandGuidelines"]
    custom_metadata_properties: List["BrandBrandCustomMetadataProperties"] = Field(
        alias="customMetadataProperties"
    )
    creative_templates: "BrandBrandCreativeTemplates" = Field(alias="creativeTemplates")


class BrandBrandRgbaColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandBrandSearch(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional[
                Annotated[
                    Union[
                        "BrandBrandSearchItemsAudio",
                        "BrandBrandSearchItemsDocument",
                        "BrandBrandSearchItemsEmbeddedContent",
                        "BrandBrandSearchItemsFile",
                        "BrandBrandSearchItemsImage",
                        "BrandBrandSearchItemsVideo",
                    ],
                    Field(discriminator="typename__"),
                ]
            ]
        ]
    ]
    edges: Optional[List[Optional["BrandBrandSearchEdges"]]]


class BrandBrandSearchItemsAudio(BaseModel):
    typename__: Literal["Audio"] = Field(alias="__typename")
    id: str
    creator: "BrandBrandSearchItemsAudioCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandBrandSearchItemsAudioModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    attachments: Optional[List[Optional["BrandBrandSearchItemsAudioAttachments"]]]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["BrandBrandSearchItemsAudioTags"]]]
    external_products: Optional[
        List[Optional["BrandBrandSearchItemsAudioExternalProducts"]]
    ] = Field(alias="externalProducts")
    copyright: Optional["BrandBrandSearchItemsAudioCopyright"]
    availability: "BrandBrandSearchItemsAudioAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[List[Optional["BrandBrandSearchItemsAudioLicenses"]]]
    author: Optional[str]
    status: AssetStatusType
    related_assets: "BrandBrandSearchItemsAudioRelatedAssets" = Field(
        alias="relatedAssets"
    )
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    download_url: Optional[Any] = Field(alias="downloadUrl")
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")


class BrandBrandSearchItemsAudioCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandSearchItemsAudioModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandSearchItemsAudioAttachments(BaseModel):
    id: str
    creator: "BrandBrandSearchItemsAudioAttachmentsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandBrandSearchItemsAudioAttachmentsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class BrandBrandSearchItemsAudioAttachmentsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandSearchItemsAudioAttachmentsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandSearchItemsAudioTags(BaseModel):
    value: str
    source: Optional[TagSource]


class BrandBrandSearchItemsAudioExternalProducts(BaseModel):
    id: str
    name: str
    external_id: Optional[str] = Field(alias="externalId")
    title: Optional[str]


class BrandBrandSearchItemsAudioCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class BrandBrandSearchItemsAudioAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class BrandBrandSearchItemsAudioLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class BrandBrandSearchItemsAudioRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandSearchItemsAudioRelatedAssetsItems"]]]


class BrandBrandSearchItemsAudioRelatedAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType
    comments: Optional["BrandBrandSearchItemsAudioRelatedAssetsItemsComments"]
    current_user_permissions: (
        "BrandBrandSearchItemsAudioRelatedAssetsItemsCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    workflow_task: Optional[
        "BrandBrandSearchItemsAudioRelatedAssetsItemsWorkflowTask"
    ] = Field(alias="workflowTask")
    variants: Optional["BrandBrandSearchItemsAudioRelatedAssetsItemsVariants"]
    preview_background_color: Optional[
        "BrandBrandSearchItemsAudioRelatedAssetsItemsPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")


class BrandBrandSearchItemsAudioRelatedAssetsItemsComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandBrandSearchItemsAudioRelatedAssetsItemsCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class BrandBrandSearchItemsAudioRelatedAssetsItemsWorkflowTask(BaseModel):
    id: str
    title: Optional[str]
    description: Optional[str]


class BrandBrandSearchItemsAudioRelatedAssetsItemsVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandBrandSearchItemsAudioRelatedAssetsItemsPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandBrandSearchItemsDocument(BaseModel):
    typename__: Literal["Document"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int
    page_count: Optional[int] = Field(alias="pageCount")


class BrandBrandSearchItemsEmbeddedContent(BaseModel):
    typename__: Literal["EmbeddedContent"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")


class BrandBrandSearchItemsFile(BaseModel):
    typename__: Literal["File"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")


class BrandBrandSearchItemsImage(BaseModel):
    typename__: Literal["Image"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int


class BrandBrandSearchItemsVideo(BaseModel):
    typename__: Literal["Video"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    width: int
    height: int
    duration: float
    bitrate: int


class BrandBrandSearchEdges(BaseModel):
    title: str
    node: Optional[
        Annotated[
            Union[
                "BrandBrandSearchEdgesNodeAudio",
                "BrandBrandSearchEdgesNodeDocument",
                "BrandBrandSearchEdgesNodeEmbeddedContent",
                "BrandBrandSearchEdgesNodeFile",
                "BrandBrandSearchEdgesNodeImage",
                "BrandBrandSearchEdgesNodeVideo",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class BrandBrandSearchEdgesNodeAudio(BaseModel):
    typename__: Literal["Audio"] = Field(alias="__typename")
    id: str
    creator: "BrandBrandSearchEdgesNodeAudioCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandBrandSearchEdgesNodeAudioModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    attachments: Optional[List[Optional["BrandBrandSearchEdgesNodeAudioAttachments"]]]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["BrandBrandSearchEdgesNodeAudioTags"]]]
    external_products: Optional[
        List[Optional["BrandBrandSearchEdgesNodeAudioExternalProducts"]]
    ] = Field(alias="externalProducts")
    copyright: Optional["BrandBrandSearchEdgesNodeAudioCopyright"]
    availability: "BrandBrandSearchEdgesNodeAudioAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[List[Optional["BrandBrandSearchEdgesNodeAudioLicenses"]]]
    author: Optional[str]
    status: AssetStatusType
    related_assets: "BrandBrandSearchEdgesNodeAudioRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["BrandBrandSearchEdgesNodeAudioComments"]
    current_user_permissions: "BrandBrandSearchEdgesNodeAudioCurrentUserPermissions" = (
        Field(alias="currentUserPermissions")
    )
    custom_metadata: List["BrandBrandSearchEdgesNodeAudioCustomMetadata"] = Field(
        alias="customMetadata"
    )
    workflow_task: Optional["BrandBrandSearchEdgesNodeAudioWorkflowTask"] = Field(
        alias="workflowTask"
    )
    variants: Optional["BrandBrandSearchEdgesNodeAudioVariants"]
    location: "BrandBrandSearchEdgesNodeAudioLocation"
    preview_background_color: Optional[
        "BrandBrandSearchEdgesNodeAudioPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    download_url: Optional[Any] = Field(alias="downloadUrl")
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")


class BrandBrandSearchEdgesNodeAudioCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandSearchEdgesNodeAudioModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandSearchEdgesNodeAudioAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class BrandBrandSearchEdgesNodeAudioTags(BaseModel):
    value: str
    source: Optional[TagSource]


class BrandBrandSearchEdgesNodeAudioExternalProducts(BaseModel):
    id: str
    name: str
    external_id: Optional[str] = Field(alias="externalId")
    title: Optional[str]


class BrandBrandSearchEdgesNodeAudioCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class BrandBrandSearchEdgesNodeAudioAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class BrandBrandSearchEdgesNodeAudioLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class BrandBrandSearchEdgesNodeAudioRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandBrandSearchEdgesNodeAudioComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandSearchEdgesNodeAudioCommentsItems"]]]


class BrandBrandSearchEdgesNodeAudioCommentsItems(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    content: str
    is_resolved: bool = Field(alias="isResolved")


class BrandBrandSearchEdgesNodeAudioCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class BrandBrandSearchEdgesNodeAudioCustomMetadata(BaseModel):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "BrandBrandSearchEdgesNodeAudioCustomMetadataProperty"


class BrandBrandSearchEdgesNodeAudioCustomMetadataProperty(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class BrandBrandSearchEdgesNodeAudioWorkflowTask(BaseModel):
    id: str
    assigned_users: List[
        Optional["BrandBrandSearchEdgesNodeAudioWorkflowTaskAssignedUsers"]
    ] = Field(alias="assignedUsers")
    asset: Optional["BrandBrandSearchEdgesNodeAudioWorkflowTaskAsset"]
    title: Optional[str]
    description: Optional[str]
    status: "BrandBrandSearchEdgesNodeAudioWorkflowTaskStatus"
    checklist_item: "BrandBrandSearchEdgesNodeAudioWorkflowTaskChecklistItem" = Field(
        alias="checklistItem"
    )


class BrandBrandSearchEdgesNodeAudioWorkflowTaskAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandSearchEdgesNodeAudioWorkflowTaskAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class BrandBrandSearchEdgesNodeAudioWorkflowTaskStatus(BaseModel):
    id: str
    name: str
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class BrandBrandSearchEdgesNodeAudioWorkflowTaskChecklistItem(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandBrandSearchEdgesNodeAudioVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: List[Optional["BrandBrandSearchEdgesNodeAudioVariantsItems"]]


class BrandBrandSearchEdgesNodeAudioVariantsItems(BaseModel):
    key: str
    filename: Optional[str]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class BrandBrandSearchEdgesNodeAudioLocation(BaseModel):
    brand: Optional["BrandBrandSearchEdgesNodeAudioLocationBrand"]
    library: Optional["BrandBrandSearchEdgesNodeAudioLocationLibrary"]
    workspace_project: Optional[
        "BrandBrandSearchEdgesNodeAudioLocationWorkspaceProject"
    ] = Field(alias="workspaceProject")
    folder: Optional["BrandBrandSearchEdgesNodeAudioLocationFolder"]


class BrandBrandSearchEdgesNodeAudioLocationBrand(BaseModel):
    id: str
    name: str


class BrandBrandSearchEdgesNodeAudioLocationLibrary(BaseModel):
    id: str
    name: Optional[str]


class BrandBrandSearchEdgesNodeAudioLocationWorkspaceProject(BaseModel):
    id: str
    name: Optional[str]


class BrandBrandSearchEdgesNodeAudioLocationFolder(BaseModel):
    id: str
    name: str


class BrandBrandSearchEdgesNodeAudioPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandBrandSearchEdgesNodeDocument(BaseModel):
    typename__: Literal["Document"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int
    page_count: Optional[int] = Field(alias="pageCount")


class BrandBrandSearchEdgesNodeEmbeddedContent(BaseModel):
    typename__: Literal["EmbeddedContent"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")


class BrandBrandSearchEdgesNodeFile(BaseModel):
    typename__: Literal["File"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")


class BrandBrandSearchEdgesNodeImage(BaseModel):
    typename__: Literal["Image"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int


class BrandBrandSearchEdgesNodeVideo(BaseModel):
    typename__: Literal["Video"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    width: int
    height: int
    duration: float
    bitrate: int


class BrandBrandLibraries(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandLibrariesItems"]]]


class BrandBrandLibrariesItems(BaseModel):
    typename__: Literal[
        "DocumentLibrary", "IconLibrary", "Library", "LogoLibrary", "MediaLibrary"
    ] = Field(alias="__typename")
    id: str
    name: str
    color: Optional["BrandBrandLibrariesItemsColor"]
    assets: "BrandBrandLibrariesItemsAssets"
    collections: "BrandBrandLibrariesItemsCollections"
    browse: "BrandBrandLibrariesItemsBrowse"
    collaborators: Optional["BrandBrandLibrariesItemsCollaborators"]
    workflow: "BrandBrandLibrariesItemsWorkflow"
    custom_metadata_properties: List[
        "BrandBrandLibrariesItemsCustomMetadataProperties"
    ] = Field(alias="customMetadataProperties")
    asset_submission_requests: List[
        "BrandBrandLibrariesItemsAssetSubmissionRequests"
    ] = Field(alias="assetSubmissionRequests")


class BrandBrandLibrariesItemsColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class BrandBrandLibrariesItemsAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandLibrariesItemsAssetsItems"]]]


class BrandBrandLibrariesItemsAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class BrandBrandLibrariesItemsCollections(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandLibrariesItemsCollectionsItems"]]]


class BrandBrandLibrariesItemsCollectionsItems(BaseModel):
    id: str
    name: str


class BrandBrandLibrariesItemsBrowse(BaseModel):
    folders: "BrandBrandLibrariesItemsBrowseFolders"
    assets: "BrandBrandLibrariesItemsBrowseAssets"


class BrandBrandLibrariesItemsBrowseFolders(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandBrandLibrariesItemsBrowseAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandBrandLibrariesItemsCollaborators(BaseModel):
    users: "BrandBrandLibrariesItemsCollaboratorsUsers"


class BrandBrandLibrariesItemsCollaboratorsUsers(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class BrandBrandLibrariesItemsWorkflow(BaseModel):
    id: str
    statuses: List[Optional["BrandBrandLibrariesItemsWorkflowStatuses"]]


class BrandBrandLibrariesItemsWorkflowStatuses(BaseModel):
    id: str
    name: str
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class BrandBrandLibrariesItemsCustomMetadataProperties(BaseModel):
    id: str
    creator: "BrandBrandLibrariesItemsCustomMetadataPropertiesCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandBrandLibrariesItemsCustomMetadataPropertiesModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    type: "BrandBrandLibrariesItemsCustomMetadataPropertiesType"
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class BrandBrandLibrariesItemsCustomMetadataPropertiesCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandLibrariesItemsCustomMetadataPropertiesModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandLibrariesItemsCustomMetadataPropertiesType(BaseModel):
    typename__: Literal[
        "CustomMetadataPropertyType",
        "CustomMetadataPropertyTypeDate",
        "CustomMetadataPropertyTypeLongText",
        "CustomMetadataPropertyTypeMultiSelect",
        "CustomMetadataPropertyTypeNumber",
        "CustomMetadataPropertyTypeSelect",
        "CustomMetadataPropertyTypeText",
        "CustomMetadataPropertyTypeUrl",
    ] = Field(alias="__typename")
    name: str


class BrandBrandLibrariesItemsAssetSubmissionRequests(BaseModel):
    id: str
    creator: "BrandBrandLibrariesItemsAssetSubmissionRequestsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["BrandBrandLibrariesItemsAssetSubmissionRequestsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    project_id: str = Field(alias="projectId")
    title: str
    description: str
    configuration: Optional[Any]


class BrandBrandLibrariesItemsAssetSubmissionRequestsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandLibrariesItemsAssetSubmissionRequestsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class BrandBrandWorkspaceProjects(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandWorkspaceProjectsItems"]]]


class BrandBrandWorkspaceProjectsItems(BaseModel):
    id: str
    name: str
    is_archived: bool = Field(alias="isArchived")


class BrandBrandGuidelines(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandGuidelinesItems"]]]


class BrandBrandGuidelinesItems(BaseModel):
    id: str
    name: Optional[str]
    url: Any
    default_language: Optional["BrandBrandGuidelinesItemsDefaultLanguage"] = Field(
        alias="defaultLanguage"
    )
    translation_languages: List[
        Optional["BrandBrandGuidelinesItemsTranslationLanguages"]
    ] = Field(alias="translationLanguages")
    library_pages: "BrandBrandGuidelinesItemsLibraryPages" = Field(alias="libraryPages")
    pages: Optional["BrandBrandGuidelinesItemsPages"]


class BrandBrandGuidelinesItemsDefaultLanguage(BaseModel):
    code: LanguageCode
    name: str


class BrandBrandGuidelinesItemsTranslationLanguages(BaseModel):
    code: LanguageCode
    name: str


class BrandBrandGuidelinesItemsLibraryPages(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandGuidelinesItemsLibraryPagesItems"]]]


class BrandBrandGuidelinesItemsLibraryPagesItems(BaseModel):
    id: str
    title: str
    type: LibraryType


class BrandBrandGuidelinesItemsPages(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["BrandBrandGuidelinesItemsPagesItems"]]]


class BrandBrandGuidelinesItemsPagesItems(BaseModel):
    id: str
    title: str
    url: Any


class BrandBrandCustomMetadataProperties(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class BrandBrandCreativeTemplates(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: List[Optional["BrandBrandCreativeTemplatesItems"]]


class BrandBrandCreativeTemplatesItems(BaseModel):
    id: str
    brand_id: str = Field(alias="brandId")
    name: str
    description: Optional[str]
    variable: Optional["BrandBrandCreativeTemplatesItemsVariable"]
    variables: List["BrandBrandCreativeTemplatesItemsVariables"]
    asset_id: Optional[str] = Field(alias="assetId")


class BrandBrandCreativeTemplatesItemsVariable(BaseModel):
    key: str
    name: str
    description: Optional[str]
    type: CreativeTemplateVariableType
    value: Optional[Any]
    connection_count: int = Field(alias="connectionCount")


class BrandBrandCreativeTemplatesItemsVariables(BaseModel):
    key: str
    name: str
    description: Optional[str]
    type: CreativeTemplateVariableType
    value: Optional[Any]
    connection_count: int = Field(alias="connectionCount")


Brand.model_rebuild()
BrandBrand.model_rebuild()
BrandBrandSearch.model_rebuild()
BrandBrandSearchItemsAudio.model_rebuild()
BrandBrandSearchItemsAudioAttachments.model_rebuild()
BrandBrandSearchItemsAudioRelatedAssets.model_rebuild()
BrandBrandSearchItemsAudioRelatedAssetsItems.model_rebuild()
BrandBrandSearchEdges.model_rebuild()
BrandBrandSearchEdgesNodeAudio.model_rebuild()
BrandBrandSearchEdgesNodeAudioComments.model_rebuild()
BrandBrandSearchEdgesNodeAudioCustomMetadata.model_rebuild()
BrandBrandSearchEdgesNodeAudioWorkflowTask.model_rebuild()
BrandBrandSearchEdgesNodeAudioVariants.model_rebuild()
BrandBrandSearchEdgesNodeAudioLocation.model_rebuild()
BrandBrandLibraries.model_rebuild()
BrandBrandLibrariesItems.model_rebuild()
BrandBrandLibrariesItemsAssets.model_rebuild()
BrandBrandLibrariesItemsCollections.model_rebuild()
BrandBrandLibrariesItemsBrowse.model_rebuild()
BrandBrandLibrariesItemsCollaborators.model_rebuild()
BrandBrandLibrariesItemsWorkflow.model_rebuild()
BrandBrandLibrariesItemsCustomMetadataProperties.model_rebuild()
BrandBrandLibrariesItemsAssetSubmissionRequests.model_rebuild()
BrandBrandWorkspaceProjects.model_rebuild()
BrandBrandGuidelines.model_rebuild()
BrandBrandGuidelinesItems.model_rebuild()
BrandBrandGuidelinesItemsLibraryPages.model_rebuild()
BrandBrandGuidelinesItemsPages.model_rebuild()
BrandBrandCreativeTemplates.model_rebuild()
BrandBrandCreativeTemplatesItems.model_rebuild()
