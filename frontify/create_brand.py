# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AssetStatusType,
    CopyrightStatus,
    CreativeTemplateVariableType,
    LanguageCode,
    TagSource,
    WorkflowStatusEnterRule,
)


class CreateBrand(BaseModel):
    create_brand: Optional["CreateBrandCreateBrand"] = Field(alias="createBrand")


class CreateBrandCreateBrand(BaseModel):
    brand: "CreateBrandCreateBrandBrand"


class CreateBrandCreateBrandBrand(BaseModel):
    id: str
    name: str
    rgba_color: Optional["CreateBrandCreateBrandBrandRgbaColor"] = Field(
        alias="rgbaColor"
    )
    avatar: Optional[Any]
    slug: Optional[str]
    search: Optional["CreateBrandCreateBrandBrandSearch"]
    libraries: Optional["CreateBrandCreateBrandBrandLibraries"]
    workspace_projects: Optional["CreateBrandCreateBrandBrandWorkspaceProjects"] = (
        Field(alias="workspaceProjects")
    )
    guidelines: Optional["CreateBrandCreateBrandBrandGuidelines"]
    custom_metadata_properties: List[
        "CreateBrandCreateBrandBrandCustomMetadataProperties"
    ] = Field(alias="customMetadataProperties")
    creative_templates: "CreateBrandCreateBrandBrandCreativeTemplates" = Field(
        alias="creativeTemplates"
    )


class CreateBrandCreateBrandBrandRgbaColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class CreateBrandCreateBrandBrandSearch(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[
            Optional[
                Annotated[
                    Union[
                        "CreateBrandCreateBrandBrandSearchItemsAudio",
                        "CreateBrandCreateBrandBrandSearchItemsDocument",
                        "CreateBrandCreateBrandBrandSearchItemsEmbeddedContent",
                        "CreateBrandCreateBrandBrandSearchItemsFile",
                        "CreateBrandCreateBrandBrandSearchItemsImage",
                        "CreateBrandCreateBrandBrandSearchItemsVideo",
                    ],
                    Field(discriminator="typename__"),
                ]
            ]
        ]
    ]
    edges: Optional[List[Optional["CreateBrandCreateBrandBrandSearchEdges"]]]


class CreateBrandCreateBrandBrandSearchItemsAudio(BaseModel):
    typename__: Literal["Audio"] = Field(alias="__typename")
    id: str
    creator: "CreateBrandCreateBrandBrandSearchItemsAudioCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["CreateBrandCreateBrandBrandSearchItemsAudioModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    attachments: Optional[
        List[Optional["CreateBrandCreateBrandBrandSearchItemsAudioAttachments"]]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[List[Optional["CreateBrandCreateBrandBrandSearchItemsAudioTags"]]]
    external_products: Optional[
        List[Optional["CreateBrandCreateBrandBrandSearchItemsAudioExternalProducts"]]
    ] = Field(alias="externalProducts")
    copyright: Optional["CreateBrandCreateBrandBrandSearchItemsAudioCopyright"]
    availability: "CreateBrandCreateBrandBrandSearchItemsAudioAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[Optional["CreateBrandCreateBrandBrandSearchItemsAudioLicenses"]]
    ]
    author: Optional[str]
    status: AssetStatusType
    related_assets: "CreateBrandCreateBrandBrandSearchItemsAudioRelatedAssets" = Field(
        alias="relatedAssets"
    )
    comments: Optional["CreateBrandCreateBrandBrandSearchItemsAudioComments"]
    current_user_permissions: (
        "CreateBrandCreateBrandBrandSearchItemsAudioCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    custom_metadata: List[
        "CreateBrandCreateBrandBrandSearchItemsAudioCustomMetadata"
    ] = Field(alias="customMetadata")
    workflow_task: Optional[
        "CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTask"
    ] = Field(alias="workflowTask")
    variants: Optional["CreateBrandCreateBrandBrandSearchItemsAudioVariants"]
    location: "CreateBrandCreateBrandBrandSearchItemsAudioLocation"
    preview_background_color: Optional[
        "CreateBrandCreateBrandBrandSearchItemsAudioPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    download_url: Optional[Any] = Field(alias="downloadUrl")
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")


class CreateBrandCreateBrandBrandSearchItemsAudioCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandSearchItemsAudioModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandSearchItemsAudioAttachments(BaseModel):
    id: str
    creator: "CreateBrandCreateBrandBrandSearchItemsAudioAttachmentsCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["CreateBrandCreateBrandBrandSearchItemsAudioAttachmentsModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class CreateBrandCreateBrandBrandSearchItemsAudioAttachmentsCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandSearchItemsAudioAttachmentsModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandSearchItemsAudioTags(BaseModel):
    value: str
    source: Optional[TagSource]


class CreateBrandCreateBrandBrandSearchItemsAudioExternalProducts(BaseModel):
    id: str
    name: str
    external_id: Optional[str] = Field(alias="externalId")
    title: Optional[str]


class CreateBrandCreateBrandBrandSearchItemsAudioCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class CreateBrandCreateBrandBrandSearchItemsAudioAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class CreateBrandCreateBrandBrandSearchItemsAudioLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class CreateBrandCreateBrandBrandSearchItemsAudioRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["CreateBrandCreateBrandBrandSearchItemsAudioRelatedAssetsItems"]]
    ]


class CreateBrandCreateBrandBrandSearchItemsAudioRelatedAssetsItems(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class CreateBrandCreateBrandBrandSearchItemsAudioComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[
        List[Optional["CreateBrandCreateBrandBrandSearchItemsAudioCommentsItems"]]
    ]


class CreateBrandCreateBrandBrandSearchItemsAudioCommentsItems(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    content: str
    is_resolved: bool = Field(alias="isResolved")


class CreateBrandCreateBrandBrandSearchItemsAudioCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class CreateBrandCreateBrandBrandSearchItemsAudioCustomMetadata(BaseModel):
    typename__: Literal[
        "CustomMetadata", "CustomMetadataValue", "CustomMetadataValues"
    ] = Field(alias="__typename")
    property: "CreateBrandCreateBrandBrandSearchItemsAudioCustomMetadataProperty"


class CreateBrandCreateBrandBrandSearchItemsAudioCustomMetadataProperty(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTask(BaseModel):
    id: str
    assigned_users: List[
        Optional["CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTaskAssignedUsers"]
    ] = Field(alias="assignedUsers")
    asset: Optional["CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTaskAsset"]
    title: Optional[str]
    description: Optional[str]
    status: "CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTaskStatus"
    checklist_item: (
        "CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTaskChecklistItem"
    ) = Field(alias="checklistItem")


class CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTaskAssignedUsers(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTaskAsset(BaseModel):
    typename__: Literal[
        "Asset", "Audio", "Document", "EmbeddedContent", "File", "Image", "Video"
    ] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    status: AssetStatusType


class CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTaskStatus(BaseModel):
    id: str
    name: str
    enter_rules: List[Optional[WorkflowStatusEnterRule]] = Field(alias="enterRules")


class CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTaskChecklistItem(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateBrandCreateBrandBrandSearchItemsAudioVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: List[Optional["CreateBrandCreateBrandBrandSearchItemsAudioVariantsItems"]]


class CreateBrandCreateBrandBrandSearchItemsAudioVariantsItems(BaseModel):
    key: str
    filename: Optional[str]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class CreateBrandCreateBrandBrandSearchItemsAudioLocation(BaseModel):
    brand: Optional["CreateBrandCreateBrandBrandSearchItemsAudioLocationBrand"]
    library: Optional["CreateBrandCreateBrandBrandSearchItemsAudioLocationLibrary"]
    workspace_project: Optional[
        "CreateBrandCreateBrandBrandSearchItemsAudioLocationWorkspaceProject"
    ] = Field(alias="workspaceProject")
    folder: Optional["CreateBrandCreateBrandBrandSearchItemsAudioLocationFolder"]


class CreateBrandCreateBrandBrandSearchItemsAudioLocationBrand(BaseModel):
    id: str
    name: str


class CreateBrandCreateBrandBrandSearchItemsAudioLocationLibrary(BaseModel):
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandSearchItemsAudioLocationWorkspaceProject(BaseModel):
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandSearchItemsAudioLocationFolder(BaseModel):
    id: str
    name: str


class CreateBrandCreateBrandBrandSearchItemsAudioPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class CreateBrandCreateBrandBrandSearchItemsDocument(BaseModel):
    typename__: Literal["Document"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int
    page_count: Optional[int] = Field(alias="pageCount")


class CreateBrandCreateBrandBrandSearchItemsEmbeddedContent(BaseModel):
    typename__: Literal["EmbeddedContent"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")


class CreateBrandCreateBrandBrandSearchItemsFile(BaseModel):
    typename__: Literal["File"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")


class CreateBrandCreateBrandBrandSearchItemsImage(BaseModel):
    typename__: Literal["Image"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int


class CreateBrandCreateBrandBrandSearchItemsVideo(BaseModel):
    typename__: Literal["Video"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    width: int
    height: int
    duration: float
    bitrate: int


class CreateBrandCreateBrandBrandSearchEdges(BaseModel):
    title: str
    node: Optional[
        Annotated[
            Union[
                "CreateBrandCreateBrandBrandSearchEdgesNodeAudio",
                "CreateBrandCreateBrandBrandSearchEdgesNodeDocument",
                "CreateBrandCreateBrandBrandSearchEdgesNodeEmbeddedContent",
                "CreateBrandCreateBrandBrandSearchEdgesNodeFile",
                "CreateBrandCreateBrandBrandSearchEdgesNodeImage",
                "CreateBrandCreateBrandBrandSearchEdgesNodeVideo",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class CreateBrandCreateBrandBrandSearchEdgesNodeAudio(BaseModel):
    typename__: Literal["Audio"] = Field(alias="__typename")
    id: str
    creator: "CreateBrandCreateBrandBrandSearchEdgesNodeAudioCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["CreateBrandCreateBrandBrandSearchEdgesNodeAudioModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    attachments: Optional[
        List[Optional["CreateBrandCreateBrandBrandSearchEdgesNodeAudioAttachments"]]
    ]
    external_id: Optional[str] = Field(alias="externalId")
    tags: Optional[
        List[Optional["CreateBrandCreateBrandBrandSearchEdgesNodeAudioTags"]]
    ]
    external_products: Optional[
        List[
            Optional["CreateBrandCreateBrandBrandSearchEdgesNodeAudioExternalProducts"]
        ]
    ] = Field(alias="externalProducts")
    copyright: Optional["CreateBrandCreateBrandBrandSearchEdgesNodeAudioCopyright"]
    availability: "CreateBrandCreateBrandBrandSearchEdgesNodeAudioAvailability"
    expires_at: Optional[Any] = Field(alias="expiresAt")
    licenses: Optional[
        List[Optional["CreateBrandCreateBrandBrandSearchEdgesNodeAudioLicenses"]]
    ]
    author: Optional[str]
    status: AssetStatusType
    related_assets: "CreateBrandCreateBrandBrandSearchEdgesNodeAudioRelatedAssets" = (
        Field(alias="relatedAssets")
    )
    comments: Optional["CreateBrandCreateBrandBrandSearchEdgesNodeAudioComments"]
    current_user_permissions: (
        "CreateBrandCreateBrandBrandSearchEdgesNodeAudioCurrentUserPermissions"
    ) = Field(alias="currentUserPermissions")
    workflow_task: Optional[
        "CreateBrandCreateBrandBrandSearchEdgesNodeAudioWorkflowTask"
    ] = Field(alias="workflowTask")
    variants: Optional["CreateBrandCreateBrandBrandSearchEdgesNodeAudioVariants"]
    preview_background_color: Optional[
        "CreateBrandCreateBrandBrandSearchEdgesNodeAudioPreviewBackgroundColor"
    ] = Field(alias="previewBackgroundColor")
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    download_url: Optional[Any] = Field(alias="downloadUrl")
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioAttachments(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: Optional[str]
    filename: Optional[str]
    type: Optional[str]
    external_id: Optional[str] = Field(alias="externalId")
    extension: Optional[str]
    size: Optional[Any]
    download_url: Optional[Any] = Field(alias="downloadUrl")


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioTags(BaseModel):
    value: str
    source: Optional[TagSource]


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioExternalProducts(BaseModel):
    id: str
    name: str
    external_id: Optional[str] = Field(alias="externalId")
    title: Optional[str]


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioCopyright(BaseModel):
    status: CopyrightStatus
    notice: Optional[str]


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioAvailability(BaseModel):
    from_: Optional[Any] = Field(alias="from")
    to: Optional[Any]


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioLicenses(BaseModel):
    id: str
    title: str
    license: str
    add_by_default: bool = Field(alias="addByDefault")
    require_consensus: bool = Field(alias="requireConsensus")


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioRelatedAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioComments(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioCurrentUserPermissions(BaseModel):
    can_edit: bool = Field(alias="canEdit")
    can_delete: bool = Field(alias="canDelete")
    can_download: bool = Field(alias="canDownload")
    can_comment: bool = Field(alias="canComment")


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioWorkflowTask(BaseModel):
    id: str
    title: Optional[str]
    description: Optional[str]


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioVariants(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateBrandCreateBrandBrandSearchEdgesNodeAudioPreviewBackgroundColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class CreateBrandCreateBrandBrandSearchEdgesNodeDocument(BaseModel):
    typename__: Literal["Document"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int
    page_count: Optional[int] = Field(alias="pageCount")


class CreateBrandCreateBrandBrandSearchEdgesNodeEmbeddedContent(BaseModel):
    typename__: Literal["EmbeddedContent"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")


class CreateBrandCreateBrandBrandSearchEdgesNodeFile(BaseModel):
    typename__: Literal["File"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")


class CreateBrandCreateBrandBrandSearchEdgesNodeImage(BaseModel):
    typename__: Literal["Image"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    focal_point: Optional[List[Optional[float]]] = Field(alias="focalPoint")
    width: int
    height: int


class CreateBrandCreateBrandBrandSearchEdgesNodeVideo(BaseModel):
    typename__: Literal["Video"] = Field(alias="__typename")
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    title: str
    description: Optional[str]
    alternative_text: Optional[str] = Field(alias="alternativeText")
    is_decorative: bool = Field(alias="isDecorative")
    external_id: Optional[str] = Field(alias="externalId")
    expires_at: Optional[Any] = Field(alias="expiresAt")
    author: Optional[str]
    status: AssetStatusType
    filename: Optional[str]
    size: Optional[Any]
    extension: str
    preview_url: Any = Field(alias="previewUrl")
    thumbnail_url: Optional[Any] = Field(alias="thumbnailUrl")
    dynamic_preview_url: Optional[Any] = Field(alias="dynamicPreviewUrl")
    download_url: Optional[Any] = Field(alias="downloadUrl")
    width: int
    height: int
    duration: float
    bitrate: int


class CreateBrandCreateBrandBrandLibraries(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["CreateBrandCreateBrandBrandLibrariesItems"]]]


class CreateBrandCreateBrandBrandLibrariesItems(BaseModel):
    typename__: Literal[
        "DocumentLibrary", "IconLibrary", "Library", "LogoLibrary", "MediaLibrary"
    ] = Field(alias="__typename")
    id: str
    name: str
    color: Optional["CreateBrandCreateBrandBrandLibrariesItemsColor"]
    assets: "CreateBrandCreateBrandBrandLibrariesItemsAssets"
    collections: "CreateBrandCreateBrandBrandLibrariesItemsCollections"
    workflow: "CreateBrandCreateBrandBrandLibrariesItemsWorkflow"
    custom_metadata_properties: List[
        "CreateBrandCreateBrandBrandLibrariesItemsCustomMetadataProperties"
    ] = Field(alias="customMetadataProperties")
    asset_submission_requests: List[
        "CreateBrandCreateBrandBrandLibrariesItemsAssetSubmissionRequests"
    ] = Field(alias="assetSubmissionRequests")


class CreateBrandCreateBrandBrandLibrariesItemsColor(BaseModel):
    red: Any
    green: Any
    blue: Any
    alpha: Any


class CreateBrandCreateBrandBrandLibrariesItemsAssets(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateBrandCreateBrandBrandLibrariesItemsCollections(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateBrandCreateBrandBrandLibrariesItemsWorkflow(BaseModel):
    id: str


class CreateBrandCreateBrandBrandLibrariesItemsCustomMetadataProperties(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class CreateBrandCreateBrandBrandLibrariesItemsAssetSubmissionRequests(BaseModel):
    id: str
    created_at: Any = Field(alias="createdAt")
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    project_id: str = Field(alias="projectId")
    title: str
    description: str
    configuration: Optional[Any]


class CreateBrandCreateBrandBrandWorkspaceProjects(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["CreateBrandCreateBrandBrandWorkspaceProjectsItems"]]]


class CreateBrandCreateBrandBrandWorkspaceProjectsItems(BaseModel):
    id: str
    name: str
    is_archived: bool = Field(alias="isArchived")


class CreateBrandCreateBrandBrandGuidelines(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: Optional[List[Optional["CreateBrandCreateBrandBrandGuidelinesItems"]]]


class CreateBrandCreateBrandBrandGuidelinesItems(BaseModel):
    id: str
    name: Optional[str]
    url: Any
    default_language: Optional[
        "CreateBrandCreateBrandBrandGuidelinesItemsDefaultLanguage"
    ] = Field(alias="defaultLanguage")
    translation_languages: List[
        Optional["CreateBrandCreateBrandBrandGuidelinesItemsTranslationLanguages"]
    ] = Field(alias="translationLanguages")
    library_pages: "CreateBrandCreateBrandBrandGuidelinesItemsLibraryPages" = Field(
        alias="libraryPages"
    )
    pages: Optional["CreateBrandCreateBrandBrandGuidelinesItemsPages"]


class CreateBrandCreateBrandBrandGuidelinesItemsDefaultLanguage(BaseModel):
    code: LanguageCode
    name: str


class CreateBrandCreateBrandBrandGuidelinesItemsTranslationLanguages(BaseModel):
    code: LanguageCode
    name: str


class CreateBrandCreateBrandBrandGuidelinesItemsLibraryPages(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateBrandCreateBrandBrandGuidelinesItemsPages(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")


class CreateBrandCreateBrandBrandCustomMetadataProperties(BaseModel):
    id: str
    creator: "CreateBrandCreateBrandBrandCustomMetadataPropertiesCreator"
    created_at: Any = Field(alias="createdAt")
    modifier: Optional["CreateBrandCreateBrandBrandCustomMetadataPropertiesModifier"]
    modified_at: Optional[Any] = Field(alias="modifiedAt")
    name: str
    type: "CreateBrandCreateBrandBrandCustomMetadataPropertiesType"
    help_text: Optional[str] = Field(alias="helpText")
    is_required: bool = Field(alias="isRequired")
    default_value: Optional[Any] = Field(alias="defaultValue")


class CreateBrandCreateBrandBrandCustomMetadataPropertiesCreator(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandCustomMetadataPropertiesModifier(BaseModel):
    typename__: Literal["AccountUser", "User"] = Field(alias="__typename")
    id: str
    name: Optional[str]


class CreateBrandCreateBrandBrandCustomMetadataPropertiesType(BaseModel):
    typename__: Literal[
        "CustomMetadataPropertyType",
        "CustomMetadataPropertyTypeDate",
        "CustomMetadataPropertyTypeLongText",
        "CustomMetadataPropertyTypeMultiSelect",
        "CustomMetadataPropertyTypeNumber",
        "CustomMetadataPropertyTypeSelect",
        "CustomMetadataPropertyTypeText",
        "CustomMetadataPropertyTypeUrl",
    ] = Field(alias="__typename")
    name: str


class CreateBrandCreateBrandBrandCreativeTemplates(BaseModel):
    total: int
    page: int
    limit: int
    has_next_page: bool = Field(alias="hasNextPage")
    items: List[Optional["CreateBrandCreateBrandBrandCreativeTemplatesItems"]]


class CreateBrandCreateBrandBrandCreativeTemplatesItems(BaseModel):
    id: str
    brand_id: str = Field(alias="brandId")
    name: str
    description: Optional[str]
    variable: Optional["CreateBrandCreateBrandBrandCreativeTemplatesItemsVariable"]
    variables: List["CreateBrandCreateBrandBrandCreativeTemplatesItemsVariables"]
    asset_id: Optional[str] = Field(alias="assetId")


class CreateBrandCreateBrandBrandCreativeTemplatesItemsVariable(BaseModel):
    key: str
    name: str
    description: Optional[str]
    type: CreativeTemplateVariableType
    value: Optional[Any]
    connection_count: int = Field(alias="connectionCount")


class CreateBrandCreateBrandBrandCreativeTemplatesItemsVariables(BaseModel):
    key: str
    name: str
    description: Optional[str]
    type: CreativeTemplateVariableType
    value: Optional[Any]
    connection_count: int = Field(alias="connectionCount")


CreateBrand.model_rebuild()
CreateBrandCreateBrand.model_rebuild()
CreateBrandCreateBrandBrand.model_rebuild()
CreateBrandCreateBrandBrandSearch.model_rebuild()
CreateBrandCreateBrandBrandSearchItemsAudio.model_rebuild()
CreateBrandCreateBrandBrandSearchItemsAudioAttachments.model_rebuild()
CreateBrandCreateBrandBrandSearchItemsAudioRelatedAssets.model_rebuild()
CreateBrandCreateBrandBrandSearchItemsAudioComments.model_rebuild()
CreateBrandCreateBrandBrandSearchItemsAudioCustomMetadata.model_rebuild()
CreateBrandCreateBrandBrandSearchItemsAudioWorkflowTask.model_rebuild()
CreateBrandCreateBrandBrandSearchItemsAudioVariants.model_rebuild()
CreateBrandCreateBrandBrandSearchItemsAudioLocation.model_rebuild()
CreateBrandCreateBrandBrandSearchEdges.model_rebuild()
CreateBrandCreateBrandBrandSearchEdgesNodeAudio.model_rebuild()
CreateBrandCreateBrandBrandLibraries.model_rebuild()
CreateBrandCreateBrandBrandLibrariesItems.model_rebuild()
CreateBrandCreateBrandBrandWorkspaceProjects.model_rebuild()
CreateBrandCreateBrandBrandGuidelines.model_rebuild()
CreateBrandCreateBrandBrandGuidelinesItems.model_rebuild()
CreateBrandCreateBrandBrandCustomMetadataProperties.model_rebuild()
CreateBrandCreateBrandBrandCreativeTemplates.model_rebuild()
CreateBrandCreateBrandBrandCreativeTemplatesItems.model_rebuild()
