# Generated by ariadne-codegen
# Source: queries-mutations

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import CreativeTemplateVariableType, TagSource


class CreativeTemplate(BaseModel):
    creative_template: Optional["CreativeTemplateCreativeTemplate"] = Field(
        alias="creativeTemplate"
    )


class CreativeTemplateCreativeTemplate(BaseModel):
    id: str
    brand_id: str = Field(alias="brandId")
    name: str
    description: Optional[str]
    pages: List["CreativeTemplateCreativeTemplatePages"]
    variable: Optional["CreativeTemplateCreativeTemplateVariable"]
    variables: List["CreativeTemplateCreativeTemplateVariables"]
    asset_id: Optional[str] = Field(alias="assetId")
    tags: List[Optional["CreativeTemplateCreativeTemplateTags"]]


class CreativeTemplateCreativeTemplatePages(BaseModel):
    preview_url: Any = Field(alias="previewUrl")
    width: int
    height: int
    page_index: int = Field(alias="pageIndex")
    name: Optional[str]


class CreativeTemplateCreativeTemplateVariable(BaseModel):
    key: str
    name: str
    description: Optional[str]
    type: CreativeTemplateVariableType
    value: Optional[Any]
    connection_count: int = Field(alias="connectionCount")


class CreativeTemplateCreativeTemplateVariables(BaseModel):
    key: str
    name: str
    description: Optional[str]
    type: CreativeTemplateVariableType
    value: Optional[Any]
    connection_count: int = Field(alias="connectionCount")


class CreativeTemplateCreativeTemplateTags(BaseModel):
    value: str
    source: Optional[TagSource]


CreativeTemplate.model_rebuild()
CreativeTemplateCreativeTemplate.model_rebuild()
